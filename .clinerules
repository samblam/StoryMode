# .clinerules

## Data Handling
- Always use question IDs when saving survey responses to the `survey_matches` table.

## Git and Branch Management (Updated January 2025)
- **Merge Conflict Resolution**: When merging feature branches, always take the feature branch version for:
  - package.json (contains updated dependencies and scripts)
  - astro.config.mjs (contains enhanced configuration)
  - package-lock.json (use `git checkout --theirs` for generated files)
- **Build Artifacts**: Remove .astro/* files from merge conflicts using `git rm -f` as they're ignored build artifacts
- **Branch Naming**: Use descriptive names like "data-visualization" for focused development work
- **Merge Strategy**: Always merge feature branches INTO main, never main into feature branches

## Security Requirements (Updated January 2025)
- **Development Context Aware**: Verbose logging is acceptable during active development but must be sanitized for production
- **Environment-Aware Security**: Implement different security levels for development vs production environments
- Use secure token generation with minimum 256-bit entropy for participant access tokens in production
- Implement input validation using Zod schemas for all API endpoints before production deployment
- Add audit logging for all data export operations in production
- Enforce anonymization controls for participant data exports
- Implement resource limits and timeouts for PDF generation operations

## Development Patterns
- Use `getClient({ requiresAdmin: true })` for admin operations, never import `supabaseAdmin` directly
- Implement proper Chart.js cleanup to prevent memory leaks in analytics components
- Add security validation to all file upload endpoints before production
- Include security headers and CSRF protection in API responses for production
- **Development Logging**: Console logging for debugging is acceptable during development but must be environment-aware

## Memory Bank Management
- Update activeContext.md after major git operations and development milestones
- Update progress.md to reflect current development phase and repository status
- Maintain .clinerules with learned patterns from each development session

## Security Audit Insights (January 2025)
- **Active Development Recognition**: Security audit must account for development vs production context
- **Supabase ORM Safety**: Using Supabase ORM provides inherent SQL injection protection through parameterized queries
- **Session Management**: 1-week session duration appropriate for development, 4-hour limit for production
- **Rate Limiting**: In-memory rate limiting acceptable for development, Redis-based required for production
- **File Upload Security**: Current MIME type validation adequate for development, content validation needed for production

## UX Sound Application Context
- This is a UX research platform for sound design, not a SOC 2 compliant application
- Focus security on protecting client sound libraries and participant survey data
- Implement GDPR compliance for EU participants
- Maintain confidentiality agreements for client intellectual property
- **Development Priority**: Functionality completion takes precedence, with security implementation planned for pre-production phase

## Analytics Debugging Patterns (January 2025)
- **Data Quality First**: Always investigate data quality issues before assuming UI/rendering problems
- **Survey Matching Logic**: Use case-insensitive partial text matching for survey responses, not exact string matching
- **Database Migration Strategy**: Create preview and execution tools for data quality fixes, never modify data without backup
- **Chart Debugging Approach**: Verify data processing → check Chart.js integration → validate canvas rendering → test user interactions
- **Astro Variable Scope**: Use `define:vars` for passing server-side variables to client-side JavaScript in Astro components
- **TypeScript Schema Issues**: Always validate database field existence before referencing in code (e.g., `updated_at` field)
- **Success Rate Calculations**: Calculate actual match percentages, not binary response success rates for meaningful analytics
- **Timeline Chart Sorting**: Use timestamp-based sorting, not alphabetical sorting for chronological data display
- **Error Pattern Analysis**: Distinguish between data quality issues and actual user behavior patterns in error categorization
- **Memory Bank Updates**: Document completed debugging sessions with specific technical solutions and patterns learned

## Data Migration Best Practices (January 2025)
- **Always Preview First**: Create migration preview functionality before executing data changes
- **Logging is Critical**: Add comprehensive logging to understand data transformation during migration
- **Validation Logic**: Implement the same improved logic in both migration tools and live submission processing
- **Database Schema Awareness**: Check column existence before referencing in migration scripts
- **Success Metrics**: Track and report migration success rates and affected record counts
- **Rollback Planning**: Ensure migration tools can identify and potentially reverse changes if needed