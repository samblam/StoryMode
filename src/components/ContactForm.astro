---
---

<script>
  interface FormData {
    name: string;
    email: string;
    message: string;
  }

  interface SubmitResponse {
    success: boolean;
    messageId?: string;
    error?: string;
  }

  const form = document.getElementById('contact-form') as HTMLFormElement;
  const formStatus = document.getElementById('form-status');
  const successMessage = formStatus?.querySelector('.success');
  const errorMessage = formStatus?.querySelector('.error');

  const validateForm = (formData: FormData): string | null => {
    const name = formData.name || '';
    const email = formData.email || '';
    const message = formData.message || '';

    const nameError = window.validateInput(name, 'name');
    if (nameError) return nameError;

    const emailError = window.validateInput(email, 'email');
    if (emailError) return emailError;

    const messageError = window.validateInput(message, 'description');
    if (messageError) return messageError;

    return null;
  };

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Reset status messages
    formStatus?.classList.add('hidden');
    successMessage?.classList.add('hidden');
    errorMessage?.classList.add('hidden');

    // Disable submit button while processing
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    submitButton.disabled = true;
    submitButton.textContent = 'Sending...';

    try {
      const formData = new FormData(form);
      const data = Object.fromEntries(formData) as unknown as FormData;

      const validationError = validateForm(data);
      if (validationError) {
        throw new Error(validationError);
      }

      const response = await fetch('/api/send-email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      const result = await response.json() as SubmitResponse;

      if (!response.ok) {
        throw new Error(result.error || `HTTP error! status: ${response.status}`);
      }

      if (result.success) {
        formStatus?.classList.remove('hidden');
        successMessage?.classList.remove('hidden');
        form.reset();
      } else {
        throw new Error(result.error || 'Failed to send email');
      }
    } catch (error) {
      console.error('Form submission error:', error);
      formStatus?.classList.remove('hidden');
      errorMessage?.classList.remove('hidden');

      if (error instanceof Error) {
        (errorMessage as HTMLElement).textContent = error.message;
      }
    } finally {
      // Re-enable submit button
      submitButton.disabled = false;
      submitButton.textContent = 'Send Message';
    }
  });
</script>

<div id="form-status" class="hidden absolute left-0 top-0 w-full h-full flex justify-center items-center bg-gray-500 bg-opacity-75">
  <p class="success hidden text-green-500">Message sent successfully!</p>
  <p class="error hidden text-red-500"></p>
</div>

<form id="contact-form" class="space-y-6">
  <div>
    <label for="name" class="block text-sm font-medium text-gray-700">Your Name</label>
    <div class="mt-1">
      <input type="text" id="name" name="name" required class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md">
    </div>
  </div>
  <div>
    <label for="email" class="block text-sm font-medium text-gray-700">Your Email</label>
    <div class="mt-1">
      <input type="email" id="email" name="email" required class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md">
    </div>
  </div>
  <div>
    <label for="message" class="block text-sm font-medium text-gray-700">Message</label>
    <div class="mt-1">
      <textarea id="message" name="message" rows="5" required class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md"></textarea>
    </div>
  </div>
  <div class="text-right">
    <button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
      Send Message
    </button>
  </div>
</form>