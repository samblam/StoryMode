---
// src/components/UserCreationForm.astro
---

<form id="user-creation-form" class="w-full max-w-md mx-auto space-y-6">
  <div>
    <label for="email" class="block text-sm font-medium mb-2">Email</label>
    <input
      type="email"
      id="email"
      name="email"
      required
      class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-400"
      placeholder="user@example.com"
    />
  </div>

  <div>
    <label for="password" class="block text-sm font-medium mb-2">Password</label>
    <input
      type="password"
      id="password"
      name="password"
      required
      minlength="8"
      class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-400"
      placeholder="Minimum 8 characters"
    />
  </div>

  <div>
    <label for="role" class="block text-sm font-medium mb-2">Role</label>
    <select
      id="role"
      name="role"
      required
      class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-400"
    >
      <option value="">Select a role</option>
      <option value="client">Client</option>
      <option value="admin">Admin</option>
    </select>
  </div>

  <!-- Client-specific fields -->
  <div id="client-fields" class="hidden space-y-6">
    <div>
      <label for="clientName" class="block text-sm font-medium mb-2">Client Name *</label>
      <input
        type="text"
        id="clientName"
        name="name"
        class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-400"
        placeholder="Full name"
      />
      <p class="text-xs text-gray-500 mt-1">Required for client accounts</p>
    </div>

    <div>
      <label for="companyName" class="block text-sm font-medium mb-2">Company Name *</label>
      <input
        type="text"
        id="companyName"
        name="company"
        class="w-full p-2 border rounded-lg focus:ring-2 focus:ring-blue-400"
        placeholder="Company or organization name"
      />
      <p class="text-xs text-gray-500 mt-1">Required for client accounts</p>
    </div>
  </div>

  <div id="form-status" class="hidden">
    <p class="error hidden text-red-600 bg-red-50 p-3 rounded-lg"></p>
    <p class="success hidden text-green-600 bg-green-50 p-3 rounded-lg"></p>
  </div>

  <button
    type="submit"
    class="w-full bg-blue-600 text-white p-2 rounded-lg hover:bg-blue-700 disabled:opacity-50"
  >
    Create User
  </button>
</form>

<script>
const form = document.getElementById('user-creation-form') as HTMLFormElement;
const roleSelect = document.getElementById('role') as HTMLSelectElement;
const clientFields = document.getElementById('client-fields') as HTMLElement;
const clientName = document.getElementById('clientName') as HTMLInputElement;
const companyName = document.getElementById('companyName') as HTMLInputElement;
const formStatus = document.getElementById('form-status') as HTMLElement;
const errorMessage = formStatus?.querySelector('.error') as HTMLElement;
const successMessage = formStatus?.querySelector('.success') as HTMLElement;

// Handle role selection changes
roleSelect?.addEventListener('change', () => {
  if (roleSelect.value === 'client') {
    clientFields.classList.remove('hidden');
    clientName.setAttribute('required', 'true');
    companyName.setAttribute('required', 'true');
  } else {
    clientFields.classList.add('hidden');
    clientName.removeAttribute('required');
    companyName.removeAttribute('required');
    // Clear client fields when switching to admin
    clientName.value = '';
    companyName.value = '';
  }
});

form?.addEventListener('submit', async (e) => {
  e.preventDefault();
  
  formStatus.classList.add('hidden');
  errorMessage.classList.add('hidden');
  successMessage.classList.add('hidden');

  const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
  submitButton.disabled = true;
  submitButton.textContent = 'Creating...';

  try {
    const formData = new FormData(form);
    
    // Type-safe form data extraction
    const email = formData.get('email')?.toString() || '';
    const password = formData.get('password')?.toString() || '';
    const role = formData.get('role')?.toString() || '';
    const name = formData.get('name')?.toString() || '';
    const company = formData.get('company')?.toString() || '';

    // Validate required fields
    if (!email || !password || !role) {
      throw new Error('Please fill in all required fields');
    }

    // Validate password
    if (password.length < 8) {
      throw new Error('Password must be at least 8 characters long');
    }

    // Validate email
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      throw new Error('Please enter a valid email address');
    }

    // Validate role
    if (!['admin', 'client'].includes(role)) {
      throw new Error('Invalid role selected');
    }

    // Validate client-specific fields
    if (role === 'client') {
      if (!name || !company) {
        throw new Error('Client name and company name are required for client accounts');
      }
    }

    // Prepare data for submission
    const userData = {
      email,
      password,
      role,
      ...(role === 'client' && { name, company })
    };

    const response = await fetch('/api/auth/create-user', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(userData),
    });

    const result = await response.json();

    if (!response.ok) {
      throw new Error(result.error || 'Failed to create user');
    }

    formStatus.classList.remove('hidden');
    successMessage.classList.remove('hidden');
    successMessage.textContent = 'User created successfully!';

    // Reset form and UI
    form.reset();
    clientFields.classList.add('hidden');
    clientName.removeAttribute('required');
    companyName.removeAttribute('required');

  } catch (error) {
    console.error('User creation error:', error);
    formStatus.classList.remove('hidden');
    errorMessage.classList.remove('hidden');
    errorMessage.textContent = error instanceof Error ? error.message : 'Failed to create user';
  } finally {
    submitButton.disabled = false;
    submitButton.textContent = 'Create User';
  }
});
</script>