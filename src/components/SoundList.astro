---
import type { Sound } from '../types/sound';
import VolumeControl from './VolumeControl.astro';
import AudioProgress from './AudioProgress.astro';

interface Props {
  sounds: Sound[];
  profileId: string;
  isAdmin: boolean;
}

const { sounds, profileId, isAdmin } = Astro.props;
---

<div class="space-y-4">
  <div class="flex justify-end mb-4">
    <VolumeControl initialVolume={0.75} />
  </div>

  {sounds.map((sound) => (
    <div class="border rounded-lg p-4 hover:bg-gray-50 transition-colors">
      <div class="flex flex-col space-y-4">
        <div class="flex items-center justify-between">
          <div>
            <h4 class="text-lg font-semibold mb-1">{sound.name}</h4>
            <p class="text-sm text-gray-500">{sound.description}</p>
          </div>
          <div class="flex space-x-2">
            <button
              class="play-button bg-green-400 text-white px-4 py-2 rounded-lg hover:bg-green-500 transition-colors"
              data-sound-id={sound.id}
              data-storage-path={sound.storage_path}
            >
              Play
            </button>
            <button
              class="download-button bg-blue-400 text-white px-4 py-2 rounded-lg hover:bg-blue-500 transition-colors"
              data-sound-id={sound.id}
              data-storage-path={sound.storage_path}
              data-filename={sound.name}
            >
              Download
            </button>
            {isAdmin && (
              <button
                class="delete-button bg-red-400 text-white px-4 py-2 rounded-lg hover:bg-red-500 transition-colors"
                data-sound-id={sound.id}
                data-storage-path={sound.storage_path}
              >
                Delete
              </button>
            )}
          </div>
        </div>
        <AudioProgress soundId={sound.id} storagePath={sound.storage_path} />
      </div>
    </div>
  ))}
</div>

<script>
  import { audioManager } from '../utils/audioManager';

  function setupPlayButtons() {
    document.querySelectorAll('.play-button').forEach((button) => {
      const buttonEl = button as HTMLButtonElement;
      const soundId = buttonEl.getAttribute('data-sound-id');
      const storagePath = buttonEl.getAttribute('data-storage-path');

      if (!soundId || !storagePath) return;

      buttonEl.addEventListener('click', async () => {
        try {
          buttonEl.disabled = true;
          
          if (audioManager.getCurrentSoundId() === soundId && audioManager.isPlaying()) {
            await audioManager.pause();
            buttonEl.textContent = 'Play';
            buttonEl.classList.remove('bg-yellow-400', 'hover:bg-yellow-500');
            buttonEl.classList.add('bg-green-400', 'hover:bg-green-500');
          } else {
            // Stop any currently playing sound button UI
            document.querySelectorAll('.play-button').forEach((btn) => {
              if (btn instanceof HTMLButtonElement) {
                btn.textContent = 'Play';
                btn.classList.remove('bg-yellow-400', 'hover:bg-yellow-500');
                btn.classList.add('bg-green-400', 'hover:bg-green-500');
              }
            });

            await audioManager.play(soundId, storagePath);
            buttonEl.textContent = 'Pause';
            buttonEl.classList.remove('bg-green-400', 'hover:bg-green-500');
            buttonEl.classList.add('bg-yellow-400', 'hover:bg-yellow-500');
          }
        } catch (error) {
          console.error('Playback error:', error);
          alert('Failed to play sound. Please try again.');
          buttonEl.textContent = 'Play';
          buttonEl.classList.remove('bg-yellow-400', 'hover:bg-yellow-500');
          buttonEl.classList.add('bg-green-400', 'hover:bg-green-500');
        } finally {
          buttonEl.disabled = false;
        }
      });
    });
  }

    function setupDownloadButtons() {
      document.querySelectorAll('.download-button').forEach((button) => {
        const buttonEl = button as HTMLButtonElement;
        const soundId = buttonEl.getAttribute('data-sound-id');
        const storagePath = buttonEl.getAttribute('data-storage-path');
        const filename = buttonEl.getAttribute('data-filename')?.toLowerCase().replace(/[^a-z0-9]/g, '-') || 'sound';

        if (!soundId || !storagePath) return;

        buttonEl.addEventListener('click', async () => {
          try {
            buttonEl.disabled = true;
            buttonEl.textContent = 'Downloading...';

            const response = await fetch(storagePath);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

              const blob = await response.blob();
              const url = window.URL.createObjectURL(blob);
              const a = document.createElement('a');
              a.style.display = 'none';
              a.href = url;
              a.download = `${filename}.mp3`;
              document.body.appendChild(a);
              a.click();
              window.URL.revokeObjectURL(url);
              document.body.removeChild(a);
            } catch (error) {
              console.error('Download error:', error);
              alert('Failed to download sound. Please try again.');
            } finally {
              buttonEl.disabled = false;
              buttonEl.textContent = 'Download';
            }
          });
      });
  }


  function setupDeleteButtons() {
      document.querySelectorAll('.delete-button').forEach((button) => {
          const buttonEl = button as HTMLButtonElement;
        const soundId = buttonEl.getAttribute('data-sound-id');
        const storagePath = buttonEl.getAttribute('data-storage-path');
      
        if (!soundId || !storagePath) return;

        buttonEl.addEventListener('click', async () => {
            if (!confirm('Are you sure you want to delete this sound?')) return;

            try {
              buttonEl.disabled = true;
              buttonEl.textContent = 'Deleting...';

              const response = await fetch('/api/sounds/delete', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  id: soundId,
                  storagePath: storagePath,
                }),
              });

              if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

              if (audioManager.getCurrentSoundId() === soundId) {
                await audioManager.pause();
              }

              // Remove from DOM
              const soundElement = buttonEl.closest('.border');
              soundElement?.remove();
            } catch (error) {
              console.error('Delete error:', error);
              alert('Failed to delete sound. Please try again.');
              buttonEl.disabled = false;
              buttonEl.textContent = 'Delete';
            }
        });
      });
    }

  // Initialize all functionality
  document.addEventListener('DOMContentLoaded', () => {
        setupPlayButtons();
        setupDownloadButtons();
        setupDeleteButtons();
    });

  // Cleanup on page unload
  window.addEventListener('unload', () => {
    audioManager.cleanup();
  });
</script>