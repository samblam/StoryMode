---
import type { Sound } from '../types/sound';

interface Props {
  sounds: Sound[];
  profileSlug: string;
}

const { sounds, profileSlug } = Astro.props;
---

<div class="space-y-4">
  {sounds.map((sound) => (
    <div class="border rounded-lg p-4 hover:bg-gray-50 transition-colors">
      <div class="flex items-center justify-between">
        <div>
          <h4 class="text-lg font-semibold mb-1">{sound.name}</h4>
          <p class="text-sm text-gray-500">{sound.description}</p>
        </div>
        <div class="flex space-x-2">
          <button
            class="play-button bg-green-400 text-white px-4 py-2 rounded-lg hover:bg-green-500 transition-colors"
            data-sound={sound.file}
          >
            Play
          </button>
          <button
            class="download-button bg-blue-400 text-white px-4 py-2 rounded-lg hover:bg-blue-500 transition-colors"
            data-sound={sound.file}
            data-filename={sound.name}
          >
            Download
          </button>
          <button
            class="delete-button bg-red-400 text-white px-4 py-2 rounded-lg hover:bg-red-500 transition-colors"
            data-sound={sound.file}
          >
            Delete
          </button>
        </div>
      </div>
    </div>
  ))}
</div>

<script>
  import { Howl } from 'howler';

  const sounds: { [key: string]: Howl } = {};
  let currentSound: Howl | null = null;

  // Handle playback
  document.querySelectorAll('.play-button').forEach((button) => {
    const soundFile = button.getAttribute('data-sound');
    if (!soundFile) return;

    sounds[soundFile] = new Howl({
      src: [soundFile],
      html5: true,
      onplay: () => {
        button.textContent = 'Pause';
      },
      onpause: () => {
        button.textContent = 'Play';
      },
      onend: () => {
        button.textContent = 'Play';
      },
    });

    button.addEventListener('click', () => {
      const sound = sounds[soundFile];
      
      if (currentSound && currentSound !== sound) {
        currentSound.pause();
      }

      if (sound.playing()) {
        sound.pause();
      } else {
        sound.play();
        currentSound = sound;
      }
    });
  });

  // Handle downloads
  document.querySelectorAll('.download-button').forEach((button) => {
    button.addEventListener('click', async () => {
      const soundFile = button.getAttribute('data-sound');
      const filename = button.getAttribute('data-filename');
      if (!soundFile) return;

      try {
        const response = await fetch(soundFile);
        if (!response.ok) throw new Error('Download failed');

        const blob = await response.blob();
        const audioBlob = new Blob([blob], { type: 'audio/mpeg' });
        const safeFilename = `${filename?.toLowerCase().replace(/[^a-z0-9]/g, '-')}.mp3`;

        const url = window.URL.createObjectURL(audioBlob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = safeFilename;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      } catch (error) {
        console.error('Download error:', error);
        alert('Failed to download sound file');
      }
    });
  });

  // Handle deletions
  document.querySelectorAll('.delete-button').forEach((button) => {
    button.addEventListener('click', async () => {
      const soundFile = button.getAttribute('data-sound');
      if (!soundFile) return;

      if (!confirm('Are you sure you want to delete this sound? This action cannot be undone.')) {
        return;
      }

      try {
        const response = await fetch('/api/sounds/delete', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ soundFile }),
        });

        if (!response.ok) {
          throw new Error('Failed to delete sound');
        }

        // Stop if playing
        const sound = sounds[soundFile];
        if (sound?.playing()) {
          sound.stop();
        }

        // Remove from DOM
        const soundElement = button.closest('.border');
        soundElement?.remove();
      } catch (error) {
        console.error('Delete error:', error);
        alert('Failed to delete sound');
      }
    });
  });
</script>