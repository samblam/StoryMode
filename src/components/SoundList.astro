---
import type { Sound } from '../types/sound';
import VolumeControl from './VolumeControl.astro';
import AudioProgress from './AudioProgress.astro';

interface Props {
  sounds: Sound[];
  profileId: string;
}

const { sounds, profileId } = Astro.props;
---

<div class="space-y-4">
  <div class="flex justify-end mb-4">
    <VolumeControl initialVolume={0.75} />
  </div>

  {sounds.map((sound) => (
    <div class="border rounded-lg p-4 hover:bg-gray-50 transition-colors">
      <div class="flex flex-col space-y-4">
        <div class="flex items-center justify-between">
          <div>
            <h4 class="text-lg font-semibold mb-1">{sound.name}</h4>
            <p class="text-sm text-gray-500">{sound.description}</p>
          </div>
          <div class="flex space-x-2">
            <button
              class="play-button bg-green-400 text-white px-4 py-2 rounded-lg hover:bg-green-500 transition-colors"
              data-sound={sound.file}  {/* This should match what's in the database */}
              data-sound-id={sound.id}
            >
              Play
            </button>
            <button
              class="download-button bg-blue-400 text-white px-4 py-2 rounded-lg hover:bg-blue-500 transition-colors"
              data-sound={sound.file}  {/* This should match what's in the database */}
              data-filename={sound.name}
            >
              Download
            </button>
            <button
              class="delete-button bg-red-400 text-white px-4 py-2 rounded-lg hover:bg-red-500 transition-colors"
              data-sound={sound.file}  {/* This should match what's in the database */}
              data-sound-id={sound.id}
            >
              Delete
            </button>
          </div>
        </div>
        <AudioProgress soundId={sound.file} />
      </div>
    </div>
  ))}
</div>

<script>
  import { audioManager } from '../utils/audioManager';

  // Handle playback
  document.querySelectorAll('.play-button').forEach((button) => {
    const soundFile = button.getAttribute('data-sound');
    if (!soundFile) return;

    button.addEventListener('click', () => {
      const currentSoundId = audioManager.getCurrentSoundId();
      
      // If this sound is currently playing, pause it
      if (currentSoundId === soundFile && audioManager.isPlaying()) {
        audioManager.pause();
        button.textContent = 'Play';
        button.classList.remove('bg-yellow-400', 'hover:bg-yellow-500');
        button.classList.add('bg-green-400', 'hover:bg-green-500');
      } else {
        // Stop any currently playing sound
        if (currentSoundId && currentSoundId !== soundFile) {
          const prevButton = document.querySelector(`[data-sound="${currentSoundId}"]`);
          if (prevButton) {
            prevButton.textContent = 'Play';
            prevButton.classList.remove('bg-yellow-400', 'hover:bg-yellow-500');
            prevButton.classList.add('bg-green-400', 'hover:bg-green-500');
          }
        }
        
        // Play the new sound
        audioManager.play(soundFile);
        button.textContent = 'Pause';
        button.classList.remove('bg-green-400', 'hover:bg-green-500');
        button.classList.add('bg-yellow-400', 'hover:bg-yellow-500');
      }
    });
  });

  // Handle downloads
  document.querySelectorAll('.download-button').forEach((button) => {
    button.addEventListener('click', async () => {
      const soundUrl = button.getAttribute('data-sound');
      const filename = button.getAttribute('data-filename')?.toLowerCase().replace(/[^a-z0-9]/g, '-') || 'sound';
      
      if (!soundUrl) return;

      try {
        const response = await fetch(soundUrl);
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = `${filename}.mp3`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      } catch (error) {
        console.error('Download error:', error);
        alert('Failed to download sound. Please try again.');
      }
    });
  });

  // Handle deletion
  document.querySelectorAll('.delete-button').forEach((button) => {
    button.addEventListener('click', async () => {
      const soundId = button.getAttribute('data-sound-id');
      const soundFile = button.getAttribute('data-sound');
      
      if (!soundId || !soundFile) return;
      
      if (!confirm('Are you sure you want to delete this sound?')) return;

      try {
        const response = await fetch('/api/sounds/delete', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            id: soundId,
            filePath: soundFile,
          }),
        });

        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

        // Remove the sound element from the DOM
        const soundElement = button.closest('.border');
        soundElement?.remove();
      } catch (error) {
        console.error('Delete error:', error);
        alert('Failed to delete sound. Please try again.');
      }
    });
  });
</script>