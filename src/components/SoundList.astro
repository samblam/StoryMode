---
import type { Sound } from '../types/sound';
import VolumeControl from './VolumeControl.astro';
import AudioProgress from './AudioProgress.astro';
import LoadingIndicator from './LoadingIndicator.astro';

interface Props {
  sounds: Sound[];
  isAdmin: boolean;
}

const { sounds, isAdmin } = Astro.props;
---

<div class="space-y-4">
  <div class="flex justify-end mb-4">
    <VolumeControl initialVolume={0.75} />
  </div>

  {sounds.map((sound) => (
    <div class="border rounded-lg p-4 hover:bg-gray-50 transition-colors">
      <div class="flex flex-col space-y-4">
        <div class="flex items-center justify-between">
          <div>
            <h4 class="text-lg font-semibold mb-1">{sound.name}</h4>
            <p class="text-sm text-gray-500">{sound.description}</p>
          </div>
          <div class="flex space-x-2">
            <button
              class="play-button bg-green-400 text-white px-4 py-2 rounded-lg hover:bg-green-500 transition-colors relative"
              data-sound={sound.file}
              data-sound-id={sound.id}
            >
              <span class="button-text">Play</span>
              <!-- Loading Spinner (hidden by default) -->
              <div class="button-spinner hidden absolute inset-0 flex items-center justify-center">
                <div class="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              </div>
            </button>
            <button
              class="download-button bg-blue-400 text-white px-4 py-2 rounded-lg hover:bg-blue-500 transition-colors"
              data-sound={sound.file}
              data-sound-id={sound.id}
              data-filename={sound.name}
            >
              Download
            </button>
            {isAdmin && (
              <button
                class="delete-button bg-red-400 text-white px-4 py-2 rounded-lg hover:bg-red-500 transition-colors"
                data-sound={sound.file}
                data-sound-id={sound.id}
              >
                Delete
              </button>
            )}
          </div>
        </div>
        <LoadingIndicator soundId={sound.id} />
        <AudioProgress soundId={sound.id} soundFile={sound.file} />
      </div>
    </div>
  ))}
</div>

<script>
  import { audioManager } from '../utils/audioManager';

  // Handle playback
  document.querySelectorAll('.play-button').forEach((button) => {
    const buttonEl = button as HTMLButtonElement;
    const soundUrl = buttonEl.getAttribute('data-sound');
    const soundId = buttonEl.getAttribute('data-sound-id');
    const buttonText = buttonEl.querySelector('.button-text') as HTMLElement;
    const buttonSpinner = buttonEl.querySelector('.button-spinner') as HTMLElement;
    
    if (!soundUrl || !soundId) return;

    // Update button state based on loading state
    const updateButtonState = (state: { status: string; progress: number }) => {
      if (state.status === 'loading') {
        buttonEl.disabled = true;
        buttonSpinner.classList.remove('hidden');
        buttonText.classList.add('invisible');
      } else {
        buttonEl.disabled = false;
        buttonSpinner.classList.add('hidden');
        buttonText.classList.remove('invisible');
      }
    };

    // Listen for loading state changes
    document.addEventListener('audioLoadingStateChange', ((event: CustomEvent) => {
      if (event.detail.soundId === soundId) {
        updateButtonState(event.detail.state);
      }
    }) as EventListener);

    buttonEl.addEventListener('click', async () => {
      try {
        buttonEl.disabled = true;
        await audioManager.play(soundUrl, soundId);
      } catch (error) {
        console.error('Playback error:', error);
        alert('Failed to play sound. Please try again.');
      } finally {
        buttonEl.disabled = false;
      }
    });
  });

  // Handle downloads
  document.querySelectorAll('.download-button').forEach((button) => {
    const buttonEl = button as HTMLButtonElement;
    const soundId = buttonEl.getAttribute('data-sound-id');
    const filename = buttonEl.getAttribute('data-filename')?.toLowerCase().replace(/[^a-z0-9]/g, '-') || 'sound';
    
    buttonEl.addEventListener('click', async () => {
      if (!soundId) return;
      
      try {
        buttonEl.disabled = true;
        buttonEl.textContent = 'Downloading...';

        // Get fresh URL before downloading
        const response = await fetch('/api/sounds/refresh-url', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ soundId }),
        });

        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        const { url } = await response.json();

        const fileResponse = await fetch(url);
        if (!fileResponse.ok) throw new Error(`HTTP error! status: ${fileResponse.status}`);

        const blob = await fileResponse.blob();
        const downloadUrl = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = downloadUrl;
        a.download = `${filename}.mp3`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(downloadUrl);
        document.body.removeChild(a);
      } catch (error) {
        console.error('Download error:', error);
        alert('Failed to download sound. Please try again.');
      } finally {
        buttonEl.disabled = false;
        buttonEl.textContent = 'Download';
      }
    });
  });

  // Handle deletion
  document.querySelectorAll('.delete-button').forEach((button) => {
    const buttonEl = button as HTMLButtonElement;
    const soundId = buttonEl.getAttribute('data-sound-id');
    const soundFile = buttonEl.getAttribute('data-sound');
    
    buttonEl.addEventListener('click', async () => {      
      if (!soundId || !soundFile) return;
      
      if (!confirm('Are you sure you want to delete this sound?')) return;

      try {
        buttonEl.disabled = true;
        buttonEl.textContent = 'Deleting...';

        const response = await fetch('/api/sounds/delete', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            id: soundId,
            filePath: soundFile,
          }),
        });

        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

        // Stop playback if this sound is playing
        if (audioManager.getCurrentSoundId() === soundFile) {
          await audioManager.pause();
        }

        // Remove from DOM
        const soundElement = buttonEl.closest('.border');
        soundElement?.remove();
      } catch (error) {
        console.error('Delete error:', error);
        alert('Failed to delete sound. Please try again.');
        buttonEl.disabled = false;
        buttonEl.textContent = 'Delete';
      }
    });
  });

  // Cleanup on page unload
  window.addEventListener('unload', () => {
    audioManager.cleanup();
  });
</script>