---
import type { SoundProfile } from '../types/sound';
import type { ClientInfo } from '../types/auth';
import { getClient } from '../lib/supabase';

interface Props {
  profile?: SoundProfile;
  mode: 'create' | 'edit';
}

const { profile, mode } = Astro.props;
const user = Astro.locals.user;
const isAdmin = user?.role === 'admin';

// Debug log
console.log('ProfileForm Debug:', {
  isAdmin,
  user,
  profileData: profile
});

// Fetch active clients if user is admin
let clients: ClientInfo[] = [];
if (isAdmin) {
  // Include all necessary fields in the query
  const supabase = getClient({ requiresAdmin: true });
  const { data, error } = await supabase
    .from('clients')
    .select('id, name, company, email, active, created_at')
    .eq('active', true)
    .order('name');
  
  if (error) {
    console.error('Error fetching clients:', error);
  } else {
    clients = data.map(client => ({
      id: client.id,
      name: client.name,
      company: client.company,
      email: client.email,
      active: client.active,
      created_at: client.created_at
    }));
    console.log('Fetched clients:', clients);
  }
}
---

<form id="profile-form" class="space-y-6 bg-white rounded-lg shadow-lg p-8">
  <input type="hidden" name="id" value={profile?.id || ''} />
  
  {isAdmin && (
    <div>
      <label for="clientId" class="block text-lg mb-2">Client</label>
      <select
        id="clientId"
        name="clientId"
        class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400"
      >
        <option value="">-- Select a client (optional) --</option>
        {clients.map(client => (
          <option 
            value={client.id}
            selected={profile?.clientId === client.id}
          >
            {client.name} {client.company ? `(${client.company})` : ''}
          </option>
        ))}
      </select>
      <p class="text-sm text-gray-600 mt-1">Associate this profile with a specific client</p>
    </div>
  )}

  <div>
    <label for="title" class="block text-lg mb-2">Profile Title</label>
    <input
      type="text"
      id="title"
      name="title"
      value={profile?.title || ''}
      required
      minlength="2"
      maxlength="50"
      class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400"
      placeholder="e.g., Professional & Clean"
    />
    <p class="text-sm text-gray-600 mt-1">2-50 characters</p>
  </div>

  <div>
    <label for="description" class="block text-lg mb-2">Description</label>
    <textarea
      id="description"
      name="description"
      required
      minlength="10"
      maxlength="200"
      class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 h-32"
      placeholder="Brief description of this sound profile"
    >{profile?.description || ''}</textarea>
    <p class="text-sm text-gray-600 mt-1">10-200 characters</p>
  </div>

  <div class="flex space-x-4">
    <button
      type="submit"
      class="bg-green-400 text-white px-8 py-3 rounded-lg text-lg hover:bg-green-500 transition-colors"
    >
      {mode === 'create' ? 'Create Profile' : 'Update Profile'}
    </button>
    <a
      href="/sounds"
      class="bg-gray-400 text-white px-8 py-3 rounded-lg text-lg hover:bg-gray-500 transition-colors inline-flex items-center"
    >
      Cancel
    </a>
  </div>

  <div id="form-status" class="hidden">
    <p class="error hidden text-red-600 bg-red-50 p-3 rounded-lg"></p>
  </div>
</form>

<script>
  const form = document.getElementById('profile-form') as HTMLFormElement;
  const formStatus = document.getElementById('form-status');
  const errorMessage = formStatus?.querySelector('.error');
  
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    if (!formStatus || !errorMessage) return;

    // Reset status
    formStatus.classList.add('hidden');
    errorMessage.classList.add('hidden');
    
    // Disable submit button
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    submitButton.disabled = true;
    const originalText = submitButton.textContent;
    submitButton.textContent = 'Saving...';
    
    try {
      const formData = new FormData(form);
      const data = Object.fromEntries(formData);
      
      // Only include clientId if it has a value
      if (!data.clientId) {
        delete data.clientId;
      }

      console.log('Submitting form data:', data);

      // Validate required fields
      if (!data.title || !data.description) {
        throw new Error('Please fill in all required fields');
      }

      const response = await fetch('/api/sound-profiles', {
        method: data.id ? 'PUT' : 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const result = await response.json();
        throw new Error(result.error || 'Failed to save profile');
      }

      // Redirect on success
      window.location.href = '/sounds?success=' + encodeURIComponent(
        data.id ? 'Profile updated successfully' : 'Profile created successfully'
      );
    } catch (error) {
      console.error('Profile save error:', error);
      formStatus.classList.remove('hidden');
      errorMessage.classList.remove('hidden');
      errorMessage.textContent = error instanceof Error ? error.message : 'Failed to save profile';
      
      // Re-enable submit button
      submitButton.disabled = false;
      submitButton.textContent = originalText;
    }
  });
</script>