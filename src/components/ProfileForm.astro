---
import type { SoundProfile } from '../types/sound';
import type { ClientInfo } from '../types/auth';

interface Props {
  profile?: SoundProfile;
  mode: 'create' | 'edit';
  clients?: ClientInfo[];
  isAdmin?: boolean;  // Add isAdmin prop
}

const { profile, mode, clients = [], isAdmin = false } = Astro.props;

console.log('ProfileForm Debug:', {
  isAdmin,
  mode,
  clientsCount: clients.length,
  clients: clients.map(c => ({ id: c.id, name: c.name }))
});
---

<form id="profile-form" class="space-y-6 bg-white rounded-lg shadow-lg p-8">
  <input type="hidden" name="id" value={profile?.id || ''} />
  
  {/* Only show client dropdown for admin users when clients exist */}
  {isAdmin && clients.length > 0 && (
    <div class="mb-6">
      <label for="clientId" class="block text-lg mb-2 font-medium">Client Association</label>
      <select
        id="clientId"
        name="clientId"
        class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400"
      >
        <option value="">No Client (General Profile)</option>
        {clients.map(client => (
          <option 
            value={client.id}
            selected={profile?.clientId === client.id}
          >
            {client.name} {client.company ? `(${client.company})` : ''}
          </option>
        ))}
      </select>
      <p class="text-sm text-gray-600 mt-1">Choose which client this profile belongs to (optional)</p>
    </div>
  )}

  <div class="mb-6">
    <label for="title" class="block text-lg mb-2 font-medium">Profile Title</label>
    <input
      type="text"
      id="title"
      name="title"
      value={profile?.title || ''}
      required
      minlength="2"
      maxlength="50"
      class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400"
      placeholder="e.g., Professional Sound Pack"
    />
    <p class="text-sm text-gray-600 mt-1">2-50 characters</p>
  </div>

  <div class="mb-6">
    <label for="description" class="block text-lg mb-2 font-medium">Description</label>
    <textarea
      id="description"
      name="description"
      required
      minlength="10"
      maxlength="200"
      class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 h-32"
      placeholder="Brief description of this sound profile"
    >{profile?.description || ''}</textarea>
    <p class="text-sm text-gray-600 mt-1">10-200 characters</p>
  </div>

  <div class="flex space-x-4">
    <button
      type="submit"
      class="bg-green-400 text-white px-8 py-3 rounded-lg text-lg hover:bg-green-500 transition-colors"
    >
      {mode === 'create' ? 'Create Profile' : 'Update Profile'}
    </button>
    <a
      href="/sounds"
      class="bg-gray-400 text-white px-8 py-3 rounded-lg text-lg hover:bg-gray-500 transition-colors inline-flex items-center"
    >
      Cancel
    </a>
  </div>

  <div id="form-status" class="hidden">
    <p class="error hidden text-red-600 bg-red-50 p-3 rounded-lg"></p>
  </div>
</form>

<script>
  const form = document.getElementById('profile-form') as HTMLFormElement;
  const formStatus = document.getElementById('form-status');
  const errorMessage = formStatus?.querySelector('.error');
  
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    if (!formStatus || !errorMessage) return;

    // Reset status messages
    formStatus.classList.add('hidden');
    errorMessage.classList.add('hidden');
    
    // Disable submit button
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    if (!submitButton) return;
    
    submitButton.disabled = true;
    const originalText = submitButton.textContent || '';
    submitButton.textContent = 'Saving...';
    
    try {
      const formData = new FormData(form);
      const data: Record<string, string> = {};
      
      // Safely get and type form values
      const title = formData.get('title')?.toString() || '';
      const description = formData.get('description')?.toString() || '';
      const clientId = formData.get('clientId')?.toString() || '';
      const id = formData.get('id')?.toString() || '';

      // Build data object
      data.title = title;
      data.description = description;
      if (clientId) data.clientId = clientId;
      if (id) data.id = id;

      // Validate required fields
      if (!title || !description) {
        throw new Error('Please fill in all required fields');
      }

      // Validate length constraints
      if (title.length < 2 || title.length > 50) {
        throw new Error('Title must be between 2 and 50 characters');
      }

      if (description.length < 10 || description.length > 200) {
        throw new Error('Description must be between 10 and 200 characters');
      }

      const response = await fetch('/api/sound-profiles', {
        method: data.id ? 'PUT' : 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const result = await response.json();
        throw new Error(result.error || 'Failed to save profile');
      }

      // Redirect on success
      window.location.href = '/sounds?success=' + encodeURIComponent(
        data.id ? 'Profile updated successfully' : 'Profile created successfully'
      );
    } catch (error) {
      console.error('Profile save error:', error);
      formStatus.classList.remove('hidden');
      errorMessage.classList.remove('hidden');
      errorMessage.textContent = error instanceof Error ? error.message : 'Failed to save profile';
      
      // Re-enable submit button
      submitButton.disabled = false;
      submitButton.textContent = originalText;
    }
  });
</script>