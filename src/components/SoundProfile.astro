---
import type { Sound } from '../types/sound';
import SoundList from './SoundList.astro';

interface Props {
  title: string;
  description: string;
  sounds: Sound[];
  profileId: string;
  isAdmin: boolean;
}

const { title, description, sounds, profileId, isAdmin } = Astro.props;
console.log('SoundProfile.astro - Rendered with:', { title, description, sounds, profileId, isAdmin });
---

<div class="bg-white rounded-lg shadow-lg p-6 mb-8">
  <div class="flex justify-between items-start mb-6">
    <div>
      <h3 class="text-2xl font-editorial mb-2">{title}</h3>
      <p class="text-gray-600">{description}</p>
    </div>
    <div class="flex space-x-2">
      <button
        class="download-all-button bg-blue-400 text-white px-4 py-2 rounded-lg hover:bg-blue-500 transition-colors"
        data-profile-name={title}
        data-sounds={JSON.stringify(sounds)}
      >
        Download All Sounds
      </button>
      {isAdmin && (
        <button
          class="delete-profile bg-red-400 text-white px-4 py-2 rounded-lg hover:bg-red-500 transition-colors"
          data-profile-id={profileId}
          data-sound-count={sounds.length}
        >
          Delete Profile
        </button>
      )}
    </div>
  </div>

  {sounds.length > 0 ? (
    <SoundList sounds={sounds} profileId={profileId} isAdmin={isAdmin} />
  ) : (
    <p class="text-gray-600 italic">No sounds added to this profile yet.</p>
  )}
</div>

<script>
  const downloadQueue = new Set<string>();

  // Handle downloading all sounds
document.querySelectorAll('.download-all-button').forEach((button) => {
  const buttonEl = button as HTMLButtonElement;

  buttonEl.addEventListener('click', async () => {
    if (buttonEl.hasAttribute('data-downloading')) return;

    const sounds = JSON.parse(buttonEl.dataset.sounds || '[]');
    const profileName = buttonEl.dataset.profileName?.toLowerCase().replace(/[^a-z0-9]/g, '-') || 'sounds';
    // Declare originalText BEFORE the try block
    const originalText = buttonEl.textContent || '';

    if (sounds.length === 0) {
      alert('No sounds available to download');
      return;
    }

    try {
      buttonEl.setAttribute('data-downloading', 'true');
      buttonEl.disabled = true;
      // Remove originalText declaration from here

      for (let i = 0; i < sounds.length; i++) {
        // ... rest of the code
          const sound = sounds[i];
          
          if (downloadQueue.has(sound.file)) continue;
          
          try {
            downloadQueue.add(sound.file);
            buttonEl.textContent = `Downloading ${i + 1}/${sounds.length}`;

            const response = await fetch(sound.file);
            if (!response.ok) throw new Error(`Failed to download ${sound.name}`);

            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `${sound.name.toLowerCase().replace(/[^a-z0-9]/g, '-')}.mp3`;
            document.body.appendChild(a);
            a.click();
            
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);

            if (i < sounds.length - 1) {
              await new Promise(resolve => setTimeout(resolve, 500));
            }
          } catch (error) {
            console.error(`Error downloading ${sound.name}:`, error);
          } finally {
            downloadQueue.delete(sound.file);
          }
        }
      } catch (error) {
        console.error('Download error:', error);
        alert('Failed to download some sounds. Please try again.');
      } finally {
        buttonEl.removeAttribute('data-downloading');
        buttonEl.disabled = false;
        buttonEl.textContent = originalText;
        downloadQueue.clear();
      }
    });
  });

  // Handle profile deletion
  document.querySelectorAll('.delete-profile').forEach((button) => {
    const buttonEl = button as HTMLButtonElement;
    
    buttonEl.addEventListener('click', async () => {
      const profileId = buttonEl.dataset.profileId;
      const soundCount = parseInt(buttonEl.dataset.soundCount || '0');

      if (!profileId) return;

      const message = soundCount > 0
        ? `This will delete the profile and ${soundCount} associated sound${soundCount !== 1 ? 's' : ''}. Are you sure?`
        : 'Are you sure you want to delete this profile?';

      if (!confirm(message)) return;

      try {
        buttonEl.disabled = true;
        const response = await fetch(`/api/sound-profiles/${profileId}`, {
          method: 'DELETE',
        });

        if (!response.ok) {
          throw new Error('Failed to delete profile');
        }

        // Refresh the page and maintain the current tab
        const currentTab = new URLSearchParams(window.location.search).get('tab') || 'library';
        window.location.href = `/sounds?tab=${currentTab}&success=Profile deleted successfully`;
      } catch (error) {
        console.error('Profile deletion error:', error);
        alert(error instanceof Error ? error.message : 'Failed to delete profile');
        buttonEl.disabled = false;
      }
    });
  });
</script>