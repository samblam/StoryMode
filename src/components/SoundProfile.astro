---
import type { Sound } from '../types/sound';
import VolumeControl from './VolumeControl.astro';
import AudioProgress from './AudioProgress.astro';

interface Props {
  title: string;
  description: string;
  sounds: Sound[];
}

const { title, description, sounds } = Astro.props;
const isAdmin = true;
---

<div class="bg-white rounded-lg shadow-lg p-6 mb-8">
  <div class="flex justify-between items-start mb-6">
    <div>
      <h3 class="text-2xl font-editorial mb-2">{title}</h3>
      <p class="text-gray-600">{description}</p>
    </div>
    <div class="flex space-x-2">
      <button
        class="download-all-button bg-blue-400 text-white px-4 py-2 rounded-lg hover:bg-blue-500 transition-colors"
        data-profile-name={title}
        data-sounds={JSON.stringify(sounds)}
      >
        Download All Sounds
      </button>
    </div>
  </div>

  <div class="flex justify-end mb-4">
    <VolumeControl initialVolume={0.75} />
  </div>
  
  <div class="space-y-4">
    {sounds.map((sound) => (
      <div class="border rounded-lg p-4 hover:bg-gray-50 transition-colors">
        <div class="flex flex-col space-y-4">
          <div class="flex items-center justify-between">
            <div>
              <h4 class="text-lg font-semibold mb-1">{sound.name}</h4>
              <p class="text-sm text-gray-500">{sound.description}</p>
            </div>
            <div class="flex space-x-2">
              <button
                class="play-button bg-green-400 text-white px-4 py-2 rounded-lg hover:bg-green-500 transition-colors"
                data-sound={sound.file}
                data-sound-id={sound.id}
              >
                Play
              </button>
              <button
                class="download-button bg-blue-400 text-white px-4 py-2 rounded-lg hover:bg-blue-500 transition-colors"
                data-sound={sound.file}
                data-filename={sound.name}
              >
                Download
              </button>
              {isAdmin && (
                <button
                  class="delete-button bg-red-400 text-white px-4 py-2 rounded-lg hover:bg-red-500 transition-colors"
                  data-sound={sound.file}
                  data-sound-id={sound.id}
                >
                  Delete
                </button>
              )}
            </div>
          </div>
          <AudioProgress soundId={sound.file} />
        </div>
      </div>
    ))}
  </div>
</div>

<script>
  import { audioManager } from '../utils/audioManager';

  // Handle playback
  document.querySelectorAll('.play-button').forEach((button) => {
    if (!(button instanceof HTMLElement)) return;
    const soundFile = button.dataset.sound;
    if (!soundFile) return;

    button.addEventListener('click', () => {
      const sound = audioManager.getSound(soundFile);
      
      if (sound.playing()) {
        sound.pause();
        button.textContent = 'Play';
        button.classList.remove('bg-yellow-400', 'hover:bg-yellow-500');
        button.classList.add('bg-green-400', 'hover:bg-green-500');
      } else {
        // Stop all other sounds first
        document.querySelectorAll('.play-button').forEach(btn => {
          if (btn instanceof HTMLElement && btn !== button) {
            const otherSoundFile = btn.dataset.sound;
            if (otherSoundFile) {
              const otherSound = audioManager.getSound(otherSoundFile);
              if (otherSound.playing()) {
                otherSound.pause();
                btn.textContent = 'Play';
                btn.classList.remove('bg-yellow-400', 'hover:bg-yellow-500');
                btn.classList.add('bg-green-400', 'hover:bg-green-500');
              }
            }
          }
        });

        sound.play();
        button.textContent = 'Pause';
        button.classList.remove('bg-green-400', 'hover:bg-green-500');
        button.classList.add('bg-yellow-400', 'hover:bg-yellow-500');
      }
    });
  });

  // Handle downloads
  document.querySelectorAll('.download-button').forEach((button) => {
    if (!(button instanceof HTMLElement)) return;
    
    button.addEventListener('click', async () => {
      const soundFile = button.dataset.sound;
      const filename = button.dataset.filename?.toLowerCase().replace(/[^a-z0-9]/g, '-') || 'sound';
      
      if (!soundFile) return;

      try {
        const response = await fetch(soundFile);
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = `${filename}.mp3`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      } catch (error) {
        console.error('Download error:', error);
        alert('Failed to download sound. Please try again.');
      }
    });
  });

  // Handle deletion
  document.querySelectorAll('.delete-button').forEach((button) => {
    if (!(button instanceof HTMLElement)) return;
    
    button.addEventListener('click', async () => {
      const soundId = button.dataset.soundId;
      const soundFile = button.dataset.sound;
      
      if (!soundId || !soundFile) return;
      
      if (!confirm('Are you sure you want to delete this sound?')) return;

      try {
        const response = await fetch('/api/sounds/delete', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            id: soundId,
            filePath: soundFile,
          }),
        });

        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

        // Remove the sound element from the DOM
        const soundElement = button.closest('.border');
        soundElement?.remove();
      } catch (error) {
        console.error('Delete error:', error);
        alert('Failed to delete sound. Please try again.');
      }
    });
  });
</script>