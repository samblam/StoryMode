---
// src/components/DataExporter.astro

interface Props {
  surveyId: string;
  rawData: any;
}

const { surveyId, rawData } = Astro.props;

const exportOptions = [
  {
    id: 'csv',
    name: 'CSV Export',
    description: 'Export raw data in CSV format',
    icon: `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
    </svg>`
  },
  {
    id: 'pdf',
    name: 'PDF Report',
    description: 'Generate detailed PDF report',
    icon: `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
    </svg>`
  }
];

const exportSettings = [
  { id: 'anonymize', label: 'Anonymize Data', default: true },
  { id: 'includeMetadata', label: 'Include Metadata', default: true },
  { id: 'includeTimestamps', label: 'Include Timestamps', default: true }
];
---

<!-- Store data in data attributes for client-side access -->
<div class="data-exporter" data-survey-id={surveyId} data-raw-data={JSON.stringify(rawData)}>
  <!-- Export Options -->
  <div class="flex space-x-4">
    {exportOptions.map(option => (
      <button
        class="export-button flex items-center px-4 py-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
        data-export-type={option.id}
        type="button"
      >
        <span class="text-gray-600" set:html={option.icon} />
        <span class="ml-2">{option.name}</span>
      </button>
    ))}
  </div>

  <!-- Export Dialog -->
  <div class="export-dialog fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg shadow-xl max-w-lg w-full mx-4">
      <div class="p-6">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">Export Settings</h3>
        
        <!-- Settings -->
        <div class="space-y-4 mb-6">
          {exportSettings.map(setting => (
            <label class="flex items-center space-x-3">
              <input
                type="checkbox"
                checked={setting.default}
                class="form-checkbox h-5 w-5 text-blue-600 rounded border-gray-300"
                data-setting={setting.id}
              />
              <span class="text-gray-700">{setting.label}</span>
            </label>
          ))}
        </div>

        <!-- Progress Bar (hidden by default) -->
        <div class="progress-container hidden">
          <div class="flex justify-between text-sm text-gray-600 mb-2">
            <span class="progress-status">Preparing export...</span>
            <span class="progress-percentage">0%</span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-2">
            <div class="progress-bar bg-blue-600 h-2 rounded-full w-0 transition-all duration-300"></div>
          </div>
        </div>

        <!-- Error Message (hidden by default) -->
        <div class="error-message hidden mt-4 p-4 bg-red-50 border-l-4 border-red-500 text-red-700"></div>

        <!-- Buttons -->
        <div class="mt-6 flex justify-end space-x-4">
          <button
            class="cancel-button px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
            type="button"
          >
            Cancel
          </button>
          <button
            class="confirm-button px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            type="button"
          >
            Export
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script is:inline>
document.addEventListener('DOMContentLoaded', function() {
  const exporterContainer = document.querySelector('.data-exporter');
  if (!exporterContainer) return;
  
  // Get data from data attributes
  const surveyId = exporterContainer.getAttribute('data-survey-id');
  const rawDataStr = exporterContainer.getAttribute('data-raw-data');
  const rawData = rawDataStr ? JSON.parse(rawDataStr) : [];
  
  const dialog = document.querySelector('.export-dialog');
  const progressContainer = document.querySelector('.progress-container');
  const progressBar = document.querySelector('.progress-bar');
  const progressStatus = document.querySelector('.progress-status');
  const progressPercentage = document.querySelector('.progress-percentage');
  const errorMessage = document.querySelector('.error-message');
  
  let currentExportType = null;
  
  // Update progress
  function updateProgress(status, percent) {
    if (progressContainer) progressContainer.classList.remove('hidden');
    if (progressStatus) progressStatus.textContent = status;
    if (progressPercentage) progressPercentage.textContent = percent + '%';
    if (progressBar) progressBar.style.width = percent + '%';
  }

  // Show error
  function showError(message) {
    if (errorMessage) {
      errorMessage.textContent = message;
      errorMessage.classList.remove('hidden');
    }
  }

  // Hide error
  function hideError() {
    if (errorMessage) errorMessage.classList.add('hidden');
  }

  // Get export settings
  function getExportSettings() {
    const settings = {};
    document.querySelectorAll('[data-setting]').forEach(function(checkbox) {
      const settingName = checkbox.getAttribute('data-setting');
      if (settingName) {
        settings[settingName] = checkbox.checked;
      }
    });
    return settings;
  }

  // Export data
  async function exportData() {
    try {
      hideError();
      const settings = getExportSettings();
      
      // Client-side validation before export
      updateProgress('Validating data...', 10);
      const validation = validateExport(rawData);
      if (!validation.isValid) {
        throw new Error('Validation failed: ' + validation.errors.join(', '));
      }

      // Process data
      updateProgress('Processing data...', 30);
      let processedData = rawData;
      
      if (settings.anonymize) {
        updateProgress('Anonymizing data...', 50);
        processedData = anonymizeData(processedData);
      }

      try {
        // Generate export using the API
        updateProgress('Generating export...', 70);
        const exportBlob = await generateExport(processedData, currentExportType, settings);

        // Download file
        updateProgress('Preparing download...', 90);
        await downloadExport(exportBlob, currentExportType);

        updateProgress('Export complete!', 100);
        
        // Close dialog after delay
        setTimeout(function() {
          if (dialog) dialog.classList.add('hidden');
          if (progressContainer) progressContainer.classList.add('hidden');
        }, 1000);
      } catch (exportError) {
        console.error('Export generation failed:', exportError);
        showError('Export generation failed: ' + (exportError.message || 'Unknown error'));
        updateProgress('Export failed', 0);
      }
    } catch (error) {
      console.error('Export failed:', error);
      showError(error.message || 'Unknown error occurred');
      updateProgress('Export failed', 0);
    }
  }

  // Client-side validation function
  function validateExport(data) {
    // Basic validation checks
    if (!data || (Array.isArray(data) && data.length === 0)) {
      return { isValid: false, errors: ['No data available for export'] };
    }
    
    // Format-specific validation
    if (currentExportType === 'csv') {
      // For CSV, check if data has properties that can be exported
      const hasExportableProperties = Array.isArray(data) && data.some(function(item) {
        return Object.keys(item).length > 0;
      });
      if (!hasExportableProperties) {
        return { isValid: false, errors: ['Data contains no exportable properties'] };
      }
    }
    
    // All checks passed
    return { isValid: true, errors: [] };
  }

  // Client-side anonymization function
  function anonymizeData(data) {
    // Simple anonymization: remove identifiable fields
    if (Array.isArray(data)) {
      return data.map(function(item) {
        const anonymized = Object.assign({}, item);
        // Remove or mask potentially identifiable fields
        ['participant_email', 'participant_name', 'email', 'name', 'user_id'].forEach(function(field) {
          if (anonymized[field]) {
            anonymized[field] = 'ANONYMIZED';
          }
        });
        return anonymized;
      });
    }
    return data;
  }

  async function generateExport(data, type, settings) {
    // Use the existing export API endpoint
    try {
      const response = await fetch('/api/surveys/' + surveyId + '/export', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ data: data, type: type, settings: settings })
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error('Export failed: ' + errorText);
      }
      
      return await response.blob();
    } catch (error) {
      console.error('Export generation error:', error);
      throw error;
    }
  }

  async function downloadExport(blob, type) {
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'survey-export-' + surveyId + '.' + type;
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
  }

  // Event Listeners
  document.querySelectorAll('.export-button').forEach(function(button) {
    button.addEventListener('click', function() {
      currentExportType = button.getAttribute('data-export-type');
      if (dialog) dialog.classList.remove('hidden');
      hideError();
      if (progressContainer) progressContainer.classList.add('hidden');
    });
  });

  const cancelButton = document.querySelector('.cancel-button');
  if (cancelButton) {
    cancelButton.addEventListener('click', function() {
      if (dialog) dialog.classList.add('hidden');
    });
  }

  const confirmButton = document.querySelector('.confirm-button');
  if (confirmButton) {
    confirmButton.addEventListener('click', exportData);
  }

  // Close dialog when clicking outside
  if (dialog) {
    dialog.addEventListener('click', function(e) {
      if (e.target === dialog) {
        dialog.classList.add('hidden');
      }
    });
  }
});
</script>

<style>
.form-checkbox {
  @apply rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50;
}

.export-dialog {
  @apply z-50;
}
</style>