---
import VideoPlayer from './VideoPlayer.astro';

interface Props {
    surveyId: string;
    currentVideoUrl?: string;
}

const { surveyId, currentVideoUrl } = Astro.props;
---

<div class="space-y-6" data-survey-id={surveyId}>
    <div class="bg-white p-6 rounded-lg shadow">
        <h3 class="text-lg font-semibold mb-4">Video Management</h3>

        <!-- Video Preview -->
        {currentVideoUrl && (
            <div class="mb-6">
                <h4 class="text-sm font-medium text-gray-700 mb-2">Current Video</h4>
                <div class="relative aspect-video bg-gray-100 rounded-lg overflow-hidden">
                    <VideoPlayer
                        videoUrl={currentVideoUrl}
                        width="100%"
                        height="100%"
                        className="w-full h-full object-contain"
                    />
                </div>
            </div>
        )}

        <!-- Upload Section -->
        <div class="space-y-4">
            <div class="flex items-center justify-center w-full">
                <label 
                    for="video-upload"
                    class="flex flex-col items-center justify-center w-full h-48 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100"
                >
                    <div class="flex flex-col items-center justify-center pt-5 pb-6">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-10 h-10 mb-3 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                        </svg>
                        <p class="mb-2 text-sm text-gray-500">
                            <span class="font-semibold">Click to upload</span> or drag and drop
                        </p>
                        <p class="text-xs text-gray-500">MP4, WebM or OGG (MAX. 50MB)</p>
                    </div>
                    <input 
                        id="video-upload" 
                        type="file"
                        accept="video/mp4,video/webm,video/ogg"
                        class="hidden"
                    />
                </label>
            </div>

            <!-- Upload Progress -->
            <div id="upload-progress" class="hidden">
                <div class="w-full bg-gray-200 rounded-full h-2.5">
                    <div class="bg-blue-600 h-2.5 rounded-full" style="width: 0%"></div>
                </div>
                <p class="text-sm text-gray-600 mt-2">Uploading... <span class="progress-text">0%</span></p>
            </div>

            <!-- Error Message -->
            <div id="error-message" class="hidden">
                <p class="text-sm text-red-600"></p>
            </div>
        </div>
    </div>
</div>

<script>
    const MAX_FILE_SIZE = 52428800; // 50MB to match server config
    const ALLOWED_TYPES = ['video/mp4', 'video/webm', 'video/ogg'];
    
    const uploadInput = document.getElementById('video-upload') as HTMLInputElement;
    const progressBar = document.querySelector('#upload-progress .bg-blue-600') as HTMLElement;
    const progressText = document.querySelector('.progress-text') as HTMLElement;
    const progressContainer = document.getElementById('upload-progress') as HTMLElement;
    const errorContainer = document.getElementById('error-message') as HTMLElement;
    const errorText = errorContainer?.querySelector('p') as HTMLElement;
    
    function showError(message: string) {
        errorText.textContent = message;
        errorContainer.classList.remove('hidden');
        setTimeout(() => {
            errorContainer.classList.add('hidden');
        }, 5000);
    }

    function updateProgress(progress: number) {
        progressBar.style.width = `${progress}%`;
        progressText.textContent = `${Math.round(progress)}%`;
    }

    async function handleFileUpload(file: File) {
        // Validate file
        if (!ALLOWED_TYPES.includes(file.type)) {
            showError('Please upload a valid video file (MP4, WebM, or OGG)');
            return;
        }

        if (file.size > MAX_FILE_SIZE) {
            showError('File size exceeds 100MB limit');
            return;
        }

        // Show progress bar
        progressContainer.classList.remove('hidden');
        updateProgress(0);

        try {
            // Create form data
            const formData = new FormData();
            formData.append('video', file);
            formData.append('surveyId', document.querySelector('[data-survey-id]')?.getAttribute('data-survey-id') || '');

            // Upload video
            const response = await fetch('/api/surveys/upload-video', {
                method: 'POST',
                body: formData,
            });

            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.error || 'Failed to upload video');
            }

            // Dispatch success event and reload to show new video
            window.dispatchEvent(new CustomEvent('video-uploaded', {
                detail: { url: data.url }
            }));
            
            // Reload the page to show the new video with VideoPlayer
            window.location.reload();

        } catch (error) {
            console.error('Upload error:', error);
            showError('Failed to upload video. Please try again.');
        } finally {
            progressContainer.classList.add('hidden');
        }
    }

    // Handle file selection
    uploadInput?.addEventListener('change', (e) => {
        const file = (e.target as HTMLInputElement).files?.[0];
        if (file) {
            handleFileUpload(file);
        }
    });

    // Handle drag and drop
    const dropZone = uploadInput?.parentElement;
    if (dropZone) {
        dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropZone.classList.add('bg-gray-100');
        });

        dropZone.addEventListener('dragleave', () => {
            dropZone.classList.remove('bg-gray-100');
        });

        dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            dropZone.classList.remove('bg-gray-100');
            
            const file = e.dataTransfer?.files[0];
            if (file) {
                handleFileUpload(file);
            }
        });
    }
</script>