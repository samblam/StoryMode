---
interface Props {
  surveyId: string;
}

const { surveyId } = Astro.props;
---
<div class="bg-white shadow rounded-lg p-6 mb-6">
  <h3 class="text-xl font-semibold mb-4">Matching Analysis</h3>
  <div style="display: none;">{surveyId}</div>
  
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
    <!-- Sound-Function Correlation -->
    <div>
      <h4 class="text-lg font-medium mb-3">Sound-Function Correlation</h4>
      <div class="bg-gray-50 p-4 rounded-lg h-64 relative">
        <canvas id="correlation-chart" class="w-full h-full"></canvas>
        <div id="correlation-loading" class="absolute inset-0 flex items-center justify-center bg-gray-50 bg-opacity-75 hidden">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
        </div>
      </div>
    </div>
    
    <!-- Error Patterns -->
    <div>
      <h4 class="text-lg font-medium mb-3">Error Patterns</h4>
      <div class="bg-gray-50 p-4 rounded-lg h-64 relative">
        <canvas id="error-patterns-chart" class="w-full h-full"></canvas>
        <div id="error-patterns-loading" class="absolute inset-0 flex items-center justify-center bg-gray-50 bg-opacity-75 hidden">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
        </div>
      </div>
    </div>
    
    <!-- Success Rates -->
    <div class="lg:col-span-2">
      <h4 class="text-lg font-medium mb-3">Success Rates</h4>
      <div class="bg-gray-50 p-4 rounded-lg">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <h5 class="text-sm font-medium text-gray-500">Overall Success Rate</h5>
            <p class="text-2xl font-bold text-gray-900" id="overall-success-rate">--%</p>
          </div>
          <div>
            <h5 class="text-sm font-medium text-gray-500">By Sound</h5>
            <div class="space-y-2" id="sound-success-rates">
              <div class="animate-pulse bg-gray-200 h-4 w-3/4 rounded"></div>
              <div class="animate-pulse bg-gray-200 h-4 w-1/2 rounded"></div>
            </div>
          </div>
          <div>
            <h5 class="text-sm font-medium text-gray-500">By Function</h5>
            <div class="space-y-2" id="function-success-rates">
              <div class="animate-pulse bg-gray-200 h-4 w-2/3 rounded"></div>
              <div class="animate-pulse bg-gray-200 h-4 w-4/5 rounded"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
</div>

<script define:vars={{ surveyId }}>
  import { surveyVisualization } from '../../utils/surveyVisualization';

  async function fetchSurveyData() {
    try {
      const response = await fetch(`/api/surveys/${surveyId}/responses`);
      if (!response.ok) throw new Error('Failed to fetch survey data');
      return await response.json();
    } catch (error) {
      console.error('Error fetching survey data:', error);
      return [];
    }
  }

  async function updateSuccessRates() {
    try {
      const response = await fetch(`/api/surveys/${surveyId}/results`);
      if (!response.ok) throw new Error('Failed to fetch survey results');
      const results = await response.json();
      
      // Update overall success rate
      const overallRate = document.getElementById('overall-success-rate');
      if (overallRate) {
        overallRate.textContent = `${Math.round(results.successRate.overall)}%`;
      }

      // Update sound success rates
      const soundRates = document.getElementById('sound-success-rates');
      if (soundRates && results.successRate.bySound) {
        soundRates.innerHTML = Object.entries(results.successRate.bySound)
          .map(([sound, rate]) => `
            <div class="flex justify-between items-center">
              <span class="text-sm text-gray-600">${sound}</span>
              <span class="font-medium">${Math.round(rate)}%</span>
            </div>
          `).join('');
      }

      // Update function success rates
      const functionRates = document.getElementById('function-success-rates');
      if (functionRates && results.successRate.byFunction) {
        functionRates.innerHTML = Object.entries(results.successRate.byFunction)
          .map(([func, rate]) => `
            <div class="flex justify-between items-center">
              <span class="text-sm text-gray-600">${func}</span>
              <span class="font-medium">${Math.round(rate)}%</span>
            </div>
          `).join('');
      }
    } catch (error) {
      console.error('Error fetching survey results:', error);
    }
  }

  async function initializeCharts() {
    const correlationChart = document.getElementById('correlation-chart');
    const errorPatternsChart = document.getElementById('error-patterns-chart');
    const correlationLoading = document.getElementById('correlation-loading');
    const errorPatternsLoading = document.getElementById('error-patterns-loading');

    if (correlationChart && errorPatternsChart && correlationLoading && errorPatternsLoading) {
      correlationLoading.classList.remove('hidden');
      errorPatternsLoading.classList.remove('hidden');
      
      const data = await fetchSurveyData();
      surveyVisualization.generateCorrelationChart(correlationChart, data);
      surveyVisualization.generateErrorPatternChart(errorPatternsChart, data);
      
      correlationLoading.classList.add('hidden');
      errorPatternsLoading.classList.add('hidden');
      
      await updateSuccessRates();
    }
  }

  document.addEventListener('DOMContentLoaded', initializeCharts);
</script>