---
import { getClient } from '../../lib/supabase';
import type { Database } from '../../types/database';

interface User {
  role: string;
}

interface Props {
  user?: User;
}

type Client = Database['public']['Tables']['clients']['Row'];
type ClientBasic = Pick<Client, 'id' | 'name'>;
type SoundProfile = Database['public']['Tables']['sound_profiles']['Row'];

let clients: ClientBasic[] | null = null;
let soundProfiles: SoundProfile[] = [];
let loading = true;
let soundProfilesLoading = false;
let errorMessage = '';
let soundProfileError = '';

const { user } = Astro.props;

if (!user) {
  errorMessage = 'User not available in component';
  loading = false;
  clients = [];
  return Astro.redirect('/login');
}

// Fetch clients after component mounts
try {
  console.log('Fetching clients from Supabase...');
  
  const client = getClient({ requiresAdmin: user?.role === 'admin' });
  console.log('Using client with context:', {
    requiresAdmin: user?.role === 'admin',
    role: user?.role
  });
  
  const { data, error } = await client
    .from('clients')
    .select('*');
    
  if (error?.code === '42501') {
    console.error('RLS Policy Violation:', {
      message: error.message,
      hint: error.hint,
      details: error.details
    });
    errorMessage = 'Permission denied. Please check your access rights.';
  }
  
  if (error) {
    console.error('Supabase query error:', {
      message: error.message,
      code: error.code,
      details: error.details
    });
    errorMessage = error.message;
  } else {
    clients = data;
  }
} catch (error) {
  console.error('Client fetch failed:', {
    error: error instanceof Error ? error.message : error,
    stack: error instanceof Error ? error.stack : undefined
  });
  errorMessage = 'Failed to load clients. Please try again.';
} finally {
  loading = false;
}
---

<form id="createSurveyForm" class="space-y-6">
  <div>
    <label for="title" class="block text-sm font-medium text-gray-700">Title</label>
    <input
      type="text"
      id="title"
      name="title"
      required
      class="mt-1 block w-full border rounded-md shadow-sm px-3 py-2"
    />
  </div>

  <div>
    <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
    <textarea
      id="description"
      name="description"
      rows="3"
      class="mt-1 block w-full border rounded-md shadow-sm px-3 py-2"
    ></textarea>
  </div>

  <div>
    <label for="client_id" class="block text-sm font-medium text-gray-700">Client</label>
    <select
      id="client_id"
      name="client_id"
      required
      class="mt-1 block w-full border rounded-md shadow-sm px-3 py-2"
    >
      <option value="">Select a client</option>
      {loading ? (
        <option value="" disabled>Loading clients...</option>
      ) : errorMessage ? (
        <option value="" disabled>{errorMessage}</option>
      ) : clients?.length ? (
        clients.map((client: ClientBasic) => (
          <option value={client.id}>{client.name}</option>
        ))
      ) : (
        <option value="" disabled>No clients found</option>
      )}
    </select>
  </div>

  <div>
    <label for="soundProfileId" class="block text-sm font-medium text-gray-700">Sound Profile</label>
    <select
      id="soundProfileId"
      name="soundProfileId"
      required
      class="mt-1 block w-full border rounded-md shadow-sm px-3 py-2"
    >
      <option value="">Select a sound profile</option>
      {soundProfilesLoading ? (
        <option value="" disabled>Loading sound profiles...</option>
      ) : soundProfileError ? (
        <option value="" disabled>{soundProfileError}</option>
      ) : soundProfiles.length ? (
        soundProfiles.map((profile: SoundProfile) => (
          <option value={profile.id}>{profile.title}</option>
        ))
      ) : (
        <option value="" disabled>No sound profiles found</option>
      )}
    </select>
  </div>

  <div class="flex items-center space-x-4">
    <button
      type="submit"
      class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
    >
      Create Survey
    </button>
    <button
      type="button"
      id="cancelButton"
      class="text-gray-600 hover:text-gray-800"
    >
      Cancel
    </button>
  </div>
</form>

<script>
interface Sound {
  id: string;
  description?: string;
}

interface SoundProfile {
  id: string;
  title: string;
}

const form = document.getElementById('createSurveyForm') as HTMLFormElement;
const clientSelect = document.getElementById('client_id');
const soundProfileSelect = document.getElementById('soundProfileId');
const submitButton = form?.querySelector('button[type="submit"]') as HTMLButtonElement;
const cancelButton = document.getElementById('cancelButton');

if (!form || !clientSelect || !soundProfileSelect || !submitButton || !cancelButton) {
  console.error('Required form elements not found');
  throw new Error('Form initialization failed');
}

// Handle cancel button click
cancelButton.addEventListener('click', () => {
  window.location.href = '/admin/surveys';
});

form.addEventListener('submit', async (e) => {
  e.preventDefault();
  console.log('Form submission started');

  // Disable form elements during submission
  submitButton.disabled = true;
  submitButton.textContent = 'Creating...';
  const formElements = form.querySelectorAll('input, select, textarea, button');
  formElements.forEach(el => (el as HTMLElement).setAttribute('disabled', 'true'));

  try {
    const formData = new FormData(form);
    // Get the selected sound profile's sounds
    const soundProfileId = formData.get('soundProfileId') as string;
    let profileSounds = [];
    
    if (soundProfileId) {
      try {
        const response = await fetch(`/api/sound-profiles/${soundProfileId}`);
        if (!response.ok) {
          throw new Error('Failed to fetch sound profile');
        }
        const profile = await response.json();
        profileSounds = profile.sounds.map((sound: Sound, index: number) => ({
          id: sound.id,
          intended_function: sound.description || '',
          order_index: index
        }));
      } catch (error) {
        console.error('Error fetching sound profile sounds:', error);
        throw new Error('Failed to load sound profile data');
      }
    }

    const data = {
      title: formData.get('title'),
      description: formData.get('description'),
      client_id: formData.get('client_id'),
      sound_profile_id: soundProfileId,
      sounds: profileSounds,
      status: 'draft'
    };

    console.log('Submitting survey data:', data);

    const response = await fetch('/api/surveys', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('API Error:', errorData);
      throw new Error(errorData.message || 'Failed to create survey');
    }

    const result = await response.json();
    console.log('Survey created successfully:', result);
    window.location.href = '/admin/surveys';
  } catch (error) {
    console.error('Survey creation failed:', error);
    const errorMessage = error instanceof Error ? error.message : 'Failed to create survey';
    alert(errorMessage);
  } finally {
    // Re-enable form elements
    submitButton.disabled = false;
    submitButton.textContent = 'Create Survey';
    const formElements = form.querySelectorAll('input, select, textarea, button');
    formElements.forEach(el => (el as HTMLElement).removeAttribute('disabled'));
  }
});

clientSelect.addEventListener('change', async (e) => {
  const clientId = (e.target as HTMLSelectElement).value;
  if (!clientId) {
    soundProfileSelect.innerHTML = '<option value="">Select a sound profile</option>';
    return;
  }

  soundProfileSelect.innerHTML = '<option value="" disabled>Loading sound profiles...</option>';
  
  try {
    const response = await fetch('/api/sound-profiles?' + new URLSearchParams({
      client_id: clientId
    }));
    
    if (!response.ok) {
      throw new Error('Failed to fetch sound profiles');
    }
    
    const profiles: SoundProfile[] = await response.json();
    
    soundProfileSelect.innerHTML = `
      <option value="">Select a sound profile</option>
      ${profiles.map((profile: SoundProfile) => `
        <option value="${profile.id}">${profile.title}</option>
      `).join('')}
    `;
  } catch (error) {
    console.error('Failed to load sound profiles:', error);
    soundProfileSelect.innerHTML = '<option value="" disabled>Failed to load sound profiles</option>';
  }
});
</script>
