---
import { supabase } from '../../lib/supabase';

interface Props {
  surveyId: string;
  status: 'draft' | 'active' | 'completed';
}

const { surveyId, status } = Astro.props;

// Fetch survey stats
const { data: stats } = await supabase
  .from('survey_responses')
  .select('id', { count: 'exact' })
  .eq('survey_id', surveyId);

const responseCount = stats?.length || 0;
---

<div class="flex flex-col space-y-2">
  <!-- Status Toggle -->
  {status !== 'completed' && (
    <button
      data-survey-id={surveyId}
      data-current-status={status}
      data-action="toggle-status"
      class={`px-4 py-2 rounded-md text-sm font-medium ${
        status === 'active'
          ? 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200'
          : 'bg-green-100 text-green-800 hover:bg-green-200'
      }`}
    >
      {status === 'active' ? 'Deactivate Survey' : 'Activate Survey'}
    </button>
  )}
  
  {status === 'active' && (
    <button
      data-survey-id={surveyId}
      data-action="complete-survey"
      class="px-4 py-2 rounded-md text-sm font-medium bg-blue-100 text-blue-800 hover:bg-blue-200"
    >
      Complete Survey
    </button>
  )}

  <!-- Quick Stats -->
  <div class="text-sm text-gray-600 bg-gray-50 p-3 rounded-md">
    <p>Total Responses: {responseCount}</p>
  </div>

  <!-- Action Buttons -->
  <div class="flex flex-col space-y-2">
    <a
      href={`/admin/surveys/${surveyId}/results`}
      class="inline-flex items-center justify-center px-4 py-2 bg-blue-50 text-blue-700 rounded-md hover:bg-blue-100"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" viewBox="0 0 20 20" fill="currentColor">
        <path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zm6-4a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zm6-3a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z" />
      </svg>
      View Detailed Stats
    </a>

    <button
      data-survey-id={surveyId}
      data-action="export-data"
      class="inline-flex items-center justify-center px-4 py-2 bg-green-50 text-green-700 rounded-md hover:bg-green-100"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
      </svg>
      Export Data
    </button>

    <button
      data-survey-id={surveyId}
      data-action="manage-visibility"
      class="inline-flex items-center justify-center px-4 py-2 bg-purple-50 text-purple-700 rounded-md hover:bg-purple-100"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" viewBox="0 0 20 20" fill="currentColor">
        <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
        <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
      </svg>
      Manage Visibility
    </button>
  </div>
</div>

<script>
  import { completeSurvey } from '../../utils/surveyDataManager';

  // Handle status toggle
  document.querySelectorAll('[data-action="toggle-status"]').forEach(button => {
    button.addEventListener('click', async (e) => {
      const btn = e.currentTarget as HTMLButtonElement;
      const surveyId = btn.dataset.surveyId;
      const currentStatus = btn.dataset.currentStatus;
      
      if (!surveyId) return;

      const newStatus = currentStatus === 'active' ? 'draft' : 'active';

      try {
        const response = await fetch(`/api/surveys/${surveyId}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ status: newStatus }),
        });

        if (response.ok) {
          // Update button state
          btn.dataset.currentStatus = newStatus;
          btn.textContent = newStatus === 'active' ? 'Deactivate Survey' : 'Activate Survey';
          btn.className = `px-4 py-2 rounded-md text-sm font-medium ${
            newStatus === 'active'
              ? 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200'
              : 'bg-green-100 text-green-800 hover:bg-green-200'
          }`;
          // Refresh the page to show/hide the complete button
          window.location.reload();
        } else {
          const error = await response.json();
          alert(`Failed to update survey status: ${error.message}`);
        }
      } catch (error) {
        console.error('Error updating survey status:', error);
        alert('Failed to update survey status. Please try again.');
      }
    });
  });

  // Handle survey completion
  document.querySelectorAll('[data-action="complete-survey"]').forEach(button => {
    button.addEventListener('click', async (e) => {
      const surveyId = (e.currentTarget as HTMLButtonElement).dataset.surveyId;
      if (!surveyId) return;

      if (confirm('Are you sure you want to mark this survey as completed? This action cannot be undone.')) {
        try {
          await completeSurvey(surveyId);
          // Refresh the page to update the UI
          window.location.reload();
        } catch (error) {
          console.error('Error completing survey:', error);
          alert('Failed to complete survey. Please try again.');
        }
      }
    });
  });

  // Handle data export
  document.querySelectorAll('[data-action="export-data"]').forEach(button => {
    button.addEventListener('click', async (e) => {
      const surveyId = (e.currentTarget as HTMLButtonElement).dataset.surveyId;
      if (!surveyId) return;

      try {
        const response = await fetch(`/api/surveys/${surveyId}/results?format=csv`);
        if (response.ok) {
          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `survey-${surveyId}-results.csv`;
          document.body.appendChild(a);
          a.click();
          window.URL.revokeObjectURL(url);
          a.remove();
        } else {
          const error = await response.json();
          alert(`Failed to export data: ${error.message}`);
        }
      } catch (error) {
        console.error('Error exporting data:', error);
        alert('Failed to export data. Please try again.');
      }
    });
  });

  // Handle visibility management
  document.querySelectorAll('[data-action="manage-visibility"]').forEach(button => {
    button.addEventListener('click', async (e) => {
      const surveyId = (e.currentTarget as HTMLButtonElement).dataset.surveyId;
      if (!surveyId) return;

      // Open modal for visibility management
      const event = new CustomEvent('open-visibility-modal', {
        detail: { surveyId }
      });
      window.dispatchEvent(event);
    });
  });
</script>