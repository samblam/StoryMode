---
interface Props {
    videoUrl: string;
    width?: string;
    height?: string;
    className?: string;
}

const { 
    videoUrl, 
    width = "100%", 
    height = "auto",
    className = "" 
} = Astro.props;
---

<div class={`video-player-container ${className}`} data-video-path={videoUrl}>
    <div class="video-loading hidden">
        <div class="loading-spinner"></div>
        <span>Loading video...</span>
    </div>
    
    <div class="video-error hidden">
        <span>Error loading video. Please try again.</span>
        <button class="retry-button">Retry</button>
    </div>
    
    <video
        class="video-player"
        controls
        style={`width: ${width}; height: ${height};`}
    >
        <source type="video/mp4">
        Your browser does not support the video tag.
    </video>
</div>

<style>
    .video-player-container {
        position: relative;
        background: #f3f4f6;
        border-radius: 0.5rem;
        overflow: hidden;
    }

    .video-player {
        display: block;
        max-width: 100%;
        border-radius: 0.5rem;
    }

    .video-loading,
    .video-error {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background: rgba(243, 244, 246, 0.9);
        color: #4b5563;
    }

    .loading-spinner {
        width: 2rem;
        height: 2rem;
        border: 3px solid #e5e7eb;
        border-top-color: #3b82f6;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 0.5rem;
    }

    .retry-button {
        margin-top: 0.5rem;
        padding: 0.5rem 1rem;
        background: #3b82f6;
        color: white;
        border-radius: 0.25rem;
        border: none;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .retry-button:hover {
        background: #2563eb;
    }

    .hidden {
        display: none;
    }

    @keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }
</style>

<script>
    import { getSignedUrl } from '../../utils/storageUtils';

    class VideoPlayerManager {
        private video: HTMLVideoElement;
        private loadingEl: HTMLElement;
        private errorEl: HTMLElement;
        private videoPath: string;
        private refreshTimer: NodeJS.Timeout | null = null;

        constructor(container: HTMLElement) {
            console.log('Initializing VideoPlayerManager');
            
            this.video = container.querySelector('.video-player') as HTMLVideoElement;
            this.loadingEl = container.querySelector('.video-loading') as HTMLElement;
            this.errorEl = container.querySelector('.video-error') as HTMLElement;
            this.videoPath = container.dataset.videoPath || '';
            
            console.log('Video path from container:', this.videoPath);

            this.initializePlayer();
            this.setupEventListeners();
        }

        private async getSignedUrl(): Promise<string | null> {
                console.log('Getting signed URL for video path:', this.videoPath);
                
                // Validate video path exists
                if (!this.videoPath) {
                    console.error('No video path provided');
                    return null;
                }
        
                try {
                    console.log('Attempting to create signed URL');
                    // Use the full path as stored in the database
                    const signedUrl = await getSignedUrl(this.videoPath, 'videos');
                    console.log('Successfully created signed URL for path:', this.videoPath);
                    return signedUrl;
                } catch (error) {
                    console.error('Error getting signed URL:', error);
                    if (error instanceof Error) {
                        console.error('Error details:', error.message);
                    }
                    return null;
                }
            }

        private async initializePlayer() {
            console.log('Initializing video player with path:', this.videoPath);
            
            if (!this.videoPath) {
                console.error('No video path provided');
                this.showError();
                return;
            }

            this.showLoading();
            console.log('Getting signed URL for path:', this.videoPath);
            const signedUrl = await this.getSignedUrl();
            
            if (!signedUrl) {
                console.error('Failed to get signed URL');
                this.showError();
                return;
            }
            console.log('Got signed URL:', signedUrl);

            const source = this.video.querySelector('source');
            if (source) {
                console.log('Setting video source to signed URL');
                source.src = signedUrl;
                this.video.load(); // Needed to refresh the video element after changing source
            } else {
                console.error('No source element found in video player');
                this.showError();
            }

            // Set up URL refresh timer (refresh every 50 minutes)
            if (this.refreshTimer) {
                clearInterval(this.refreshTimer);
            }
            this.refreshTimer = setInterval(async () => {
                const newUrl = await this.getSignedUrl();
                if (newUrl) {
                    const source = this.video.querySelector('source');
                    if (source) {
                        const currentTime = this.video.currentTime;
                        const isPaused = this.video.paused;
                        source.src = newUrl;
                        this.video.load();
                        this.video.currentTime = currentTime;
                        if (!isPaused) {
                            this.video.play();
                        }
                    }
                }
            }, 50 * 60 * 1000); // 50 minutes
        }

        private setupEventListeners() {
            this.video.addEventListener('loadstart', () => this.showLoading());
            this.video.addEventListener('canplay', () => this.hideLoading());
            this.video.addEventListener('error', () => this.showError());

            const retryButton = this.errorEl.querySelector('.retry-button');
            if (retryButton) {
                retryButton.addEventListener('click', () => this.retryLoading());
            }

            // Clean up on page unload
            window.addEventListener('unload', () => {
                if (this.refreshTimer) {
                    clearInterval(this.refreshTimer);
                }
            });
        }

        private showLoading() {
            this.loadingEl.classList.remove('hidden');
            this.errorEl.classList.add('hidden');
        }

        private hideLoading() {
            this.loadingEl.classList.add('hidden');
        }

        private showError() {
            this.loadingEl.classList.add('hidden');
            this.errorEl.classList.remove('hidden');
        }

        private async retryLoading() {
            this.video.load();
            await this.initializePlayer();
        }
    }

    // Initialize all video players on the page
    document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.video-player-container').forEach(container => {
            new VideoPlayerManager(container as HTMLElement);
        });
    });
</script>