---
import { supabase } from '../../lib/supabase';

interface Props {
    surveyId: string;
}

const { surveyId } = Astro.props;

// Fetch existing functions for this survey
const { data: surveyFunctions, error } = await supabase
    .from('survey_sounds')
    .select('intended_function')
    .eq('survey_id', surveyId)
    .not('intended_function', 'is', null)
    .order('intended_function');

const uniqueFunctions = [...new Set(surveyFunctions?.map(f => f.intended_function) || [])];

if (error) {
    console.error('Error fetching survey functions:', error);
}
---

<div class="bg-white p-6 rounded-lg shadow mb-6">
    <h3 class="text-lg font-semibold mb-4">Survey Functions</h3>
    
    <!-- Function List -->
    <div class="space-y-2 mb-4">
        {uniqueFunctions.map(func => (
            <div class="flex items-center justify-between bg-gray-50 p-2 rounded">
                <span>{func}</span>
                <button
                    type="button"
                    class="delete-function text-red-600 hover:text-red-800"
                    data-function={func}
                >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </button>
            </div>
        ))}
    </div>

    <!-- Add Function Form -->
    <form id="add-function-form" class="flex gap-2">
        <input
            type="text"
            id="new-function"
            name="new-function"
            class="flex-1 rounded-md border-gray-300"
            placeholder="Enter new function"
            required
        />
        <button
            type="submit"
            class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
        >
            Add Function
        </button>
    </form>
</div>

<script define:vars={{ surveyId }}>
    // Function to dispatch custom event when functions change
    const notifyFunctionsChanged = () => {
        const event = new CustomEvent('surveyFunctionsChanged', {
            detail: {
                surveyId
            },
            bubbles: true
        });
        document.dispatchEvent(event);
    };

    // Handle form submission
    document.getElementById('add-function-form')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const form = /** @type {HTMLFormElement} */ (e.target);
        const input = /** @type {HTMLInputElement} */ (form.querySelector('#new-function'));
        const functionName = input.value.trim();

        if (!functionName) return;

        try {
            // We'll just insert a dummy mapping to store the function
            // It will be removed/updated when actual sound mappings are created
            const { error } = await window.supabase
                .from('survey_sounds')
                .insert({
                    survey_id: surveyId,
                    sound_id: null, // This will be updated when mapping is created
                    intended_function: functionName,
                    order_index: 0
                });

            if (error) throw error;

            // Clear input and reload page to show new function
            input.value = '';
            notifyFunctionsChanged();
            window.location.reload();
        } catch (error) {
            console.error('Error adding function:', error);
            alert('Failed to add function. Please try again.');
        }
    });

    // Handle function deletion
    document.addEventListener('click', async (e) => {
        const button = /** @type {HTMLElement} */ (e.target).closest('.delete-function');
        if (!button) return;

        const functionName = button.getAttribute('data-function');
        if (!functionName) return;

        if (!confirm(`Are you sure you want to delete the function "${functionName}"?`)) return;

        try {
            const { error } = await window.supabase
                .from('survey_sounds')
                .delete()
                .eq('survey_id', surveyId)
                .eq('intended_function', functionName);

            if (error) throw error;

            notifyFunctionsChanged();
            window.location.reload();
        } catch (error) {
            console.error('Error deleting function:', error);
            alert('Failed to delete function. Please try again.');
        }
    });
</script>