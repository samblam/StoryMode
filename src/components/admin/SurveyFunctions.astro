---
import { supabase } from '../../lib/supabase';

interface Props {
    surveyId: string;
}

const { surveyId } = Astro.props;

// Fetch survey functions
const { data: survey, error } = await supabase
    .from('surveys')
    .select('functions')
    .eq('id', surveyId)
    .single();

const functions = Array.isArray(survey?.functions) ? survey.functions : [];

if (error) {
    console.error('Error fetching survey functions:', error);
}
---

<div class="bg-white p-6 rounded-lg shadow mb-6">
    <h3 class="text-lg font-semibold mb-4">Survey Functions</h3>
    
    <!-- Function List -->
    <div class="space-y-2 mb-4">
        {functions.map((func: string) => (
            <div class="flex items-center justify-between bg-gray-50 p-2 rounded">
                <span>{func}</span>
                <button
                    type="button"
                    class="delete-function text-red-600 hover:text-red-800"
                    data-function={func}
                >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </button>
            </div>
        ))}
    </div>

    <!-- Add Function Form -->
    <form id="add-function-form" class="flex gap-2">
        <input
            type="text"
            id="new-function"
            name="new-function"
            class="flex-1 rounded-md border-gray-300"
            placeholder="Enter new function"
            required
        />
        <button
            type="submit"
            class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
        >
            Add Function
        </button>
    </form>
</div>

<script>
    import { createClient } from '@supabase/supabase-js';
    import type { SupabaseClient } from '@supabase/supabase-js';
    import type { Database } from '../../types/database';

    // Add TypeScript declaration for window.supabase
    declare global {
        interface Window {
            supabase: SupabaseClient<Database>;
        }
    }

    // Initialize Supabase client in browser
    const initializeSupabase = () => {
        if (!window.supabase) {
            const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
            const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;

            if (!supabaseUrl || !supabaseAnonKey) {
                throw new Error('Missing Supabase configuration');
            }

            window.supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {
                auth: {
                    persistSession: true,
                    autoRefreshToken: true,
                    detectSessionInUrl: true
                }
            });
        }
        return window.supabase;
    };

    // Initialize on load
    document.addEventListener('DOMContentLoaded', initializeSupabase);
</script>

<script define:vars={{ surveyId }}>

    // Debug function to log survey data
    const logSurveyData = async () => {
        const { data, error } = await window.supabase
            .from('surveys')
            .select('*')
            .eq('id', surveyId)
            .single();
        
        console.log('Current survey data:', data);
        if (error) console.error('Error fetching survey:', error);
    };

    // Function to dispatch custom event when functions change
    const notifyFunctionsChanged = () => {
        const event = new CustomEvent('surveyFunctionsChanged', {
            detail: {
                surveyId
            },
            bubbles: true
        });
        document.dispatchEvent(event);
    };

    // Handle form submission
    document.getElementById('add-function-form')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const form = /** @type {HTMLFormElement} */ (e.target);
        const input = /** @type {HTMLInputElement} */ (form.querySelector('#new-function'));
        const functionName = input.value.trim();

        if (!functionName) return;

        try {
            // Ensure Supabase is initialized
            if (!window.supabase) {
                try {
                    initializeSupabase();
                } catch (error) {
                    console.error('Failed to initialize Supabase:', error);
                    alert('Failed to initialize database connection. Please refresh the page and try again.');
                    return;
                }
            }

            console.log('Adding function:', functionName);
            await logSurveyData(); // Log initial state

            // Get current functions
            const { data: survey, error: fetchError } = await window.supabase
                .from('surveys')
                .select('functions')
                .eq('id', surveyId)
                .single();
            
            if (fetchError) {
                console.error('Error fetching survey:', fetchError);
                throw fetchError;
            }

            console.log('Current survey data:', survey);
            
            // Initialize or get current functions array
            const currentFunctions = Array.isArray(survey?.functions) ? survey.functions : [];
            console.log('Current functions:', currentFunctions);
            
            // Add new function if it doesn't exist
            if (!currentFunctions.includes(functionName)) {
                const newFunctions = [...currentFunctions, functionName];
                console.log('New functions array:', newFunctions);

                const { error: updateError } = await window.supabase
                    .from('surveys')
                    .update({
                        functions: newFunctions
                    })
                    .eq('id', surveyId);

                if (updateError) {
                    console.error('Error updating survey:', updateError);
                    throw updateError;
                }

                console.log('Update successful');
                await logSurveyData(); // Log final state

                // Clear input and update UI
                input.value = '';
                notifyFunctionsChanged();
                
                // Add new function to UI
                const functionList = document.querySelector('.space-y-2');
                if (functionList) {
                    const newFunctionElement = document.createElement('div');
                    newFunctionElement.className = 'flex items-center justify-between bg-gray-50 p-2 rounded';
                    newFunctionElement.innerHTML = `
                        <span>${functionName}</span>
                        <button
                            type="button"
                            class="delete-function text-red-600 hover:text-red-800"
                            data-function="${functionName}"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    `;
                    functionList.appendChild(newFunctionElement);
                }
            } else {
                console.log('Function already exists');
                alert('This function already exists.');
            }
        } catch (error) {
            console.error('Error adding function:', error);
            alert('Failed to add function. Please try again.');
        }
    });

    // Handle function deletion
    document.addEventListener('click', async (e) => {
        const button = /** @type {HTMLElement} */ (e.target).closest('.delete-function');
        if (!button) return;

        const functionName = button.getAttribute('data-function');
        if (!functionName) return;

        if (!confirm(`Are you sure you want to delete the function "${functionName}"?`)) return;

        try {
            // Ensure Supabase is initialized
            if (!window.supabase) {
                try {
                    initializeSupabase();
                } catch (error) {
                    console.error('Failed to initialize Supabase:', error);
                    alert('Failed to initialize database connection. Please refresh the page and try again.');
                    return;
                }
            }

            // Get current functions
            const { data: survey } = await window.supabase
                .from('surveys')
                .select('functions')
                .eq('id', surveyId)
                .single();
            
            const currentFunctions = Array.isArray(survey?.functions) ? survey.functions : [];
            
            // Remove the function
            const { error } = await window.supabase
                .from('surveys')
                .update({
                    functions: currentFunctions.filter(f => f !== functionName)
                })
                .eq('id', surveyId);

            if (error) throw error;

            // Remove function from UI
            const functionElement = button.closest('.flex');
            if (functionElement) {
                functionElement.remove();
            }

            notifyFunctionsChanged();
        } catch (error) {
            console.error('Error deleting function:', error);
            alert('Failed to delete function. Please try again.');
        }
    });
</script>