---
import { supabase } from '../../lib/supabase';

interface Props {
    surveyId: string;
    initialMappings?: {
        soundId: string;
        intended_function: string;
        order: number;
    }[];
}

const { surveyId, initialMappings = [] } = Astro.props;

import type { Database } from '../../types/database';
type Sound = Database['public']['Tables']['sounds']['Row'];

// Initialize empty arrays for sounds and functions
let sounds: Sound[] = [];
let functions: { id: string; description: string; }[] = [];

try {
    // Fetch available sounds
    const { data: soundsData, error: soundsError } = await supabase
        .from('sounds')
        .select('id, name, description, file_path, storage_path, created_at, profile_id')
        .order('name');

    if (soundsError) {
        console.error('Error fetching sounds:', soundsError);
    } else if (soundsData) {
        sounds = soundsData;
    }

    // Fetch distinct functions from survey_sounds
    const { data: functionsData, error: functionsError } = await supabase
        .from('survey_sounds')
        .select('intended_function')
        .not('intended_function', 'is', null)
        .order('intended_function');

    if (functionsError) {
        console.error('Error fetching functions:', functionsError);
    } else if (functionsData) {
        // Transform the intended_function data into the expected format
        functions = functionsData
            .filter((f): f is { intended_function: string } =>
                typeof f.intended_function === 'string' && f.intended_function !== '')
            .map(f => ({
                id: f.intended_function, // Use the function name as the ID
                description: f.intended_function
            }));
    }

    console.log('Fetched sounds:', sounds);
    console.log('Fetched functions:', functions);
} catch (error) {
    console.error('Error in data fetching:', error);
}

---

<div class="space-y-6">
    <div class="bg-white p-6 rounded-lg shadow">
        <h3 class="text-lg font-semibold mb-4">Sound Selection & Mapping</h3>
        
        <!-- Sound-Function Mapping Interface -->
        <div
            id="mapping-container"
            class="space-y-4"
            data-survey-id={surveyId}
            data-sounds={JSON.stringify(sounds)}
            data-functions={JSON.stringify(functions)}
        >
            {sounds.length === 0 && functions.length === 0 && (
                <p class="text-gray-500 italic">No sounds or functions available. Please add some before creating mappings.</p>
            )}
            {initialMappings.map((mapping) => (
                <div
                    class="mapping-row bg-gray-50 p-4 rounded-md flex items-center space-x-4"
                    data-mapping-id={`${mapping.soundId}-${mapping.intended_function}`}
                    data-order={mapping.order}
                >
                    <!-- Drag Handle -->
                    <div class="cursor-move">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M3 7a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 6a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd" />
                        </svg>
                    </div>

                    <!-- Sound Selection -->
                    <div class="flex-1">
                        <select
                            class="sound-select w-full rounded-md border-gray-300"
                            data-current-sound={mapping.soundId}
                        >
                            <option value="">Select Sound</option>
                            {(sounds || []).map(sound => (
                                <option
                                    value={sound.id}
                                    selected={sound.id === mapping.soundId}
                                    data-sound-url={sound.file_path || ''}
                                    data-storage-path={sound.storage_path || ''}
                                >
                                    {sound.name}
                                </option>
                            ))}
                        </select>
                    </div>

                    <!-- Function Selection -->
                    <div class="flex-1">
                        {functions.length > 0 ? (
                            <select
                                class="function-select w-full rounded-md border-gray-300"
                                data-current-function={mapping.intended_function}
                            >
                                <option value="">Select Function</option>
                                {functions?.map(func => (
                                    <option
                                        value={func.id}
                                        selected={func.id === mapping.intended_function}
                                    >
                                        {func.description}
                                    </option>
                                ))}
                            </select>
                        ) : (
                            <input
                                type="text"
                                class="function-input w-full rounded-md border-gray-300"
                                placeholder="Enter sound function"
                                value={mapping.intended_function || ''}
                            />
                        )}
                    </div>

                    <!-- Preview Button -->
                    <button
                        type="button"
                        class="preview-sound p-2 text-blue-600 hover:text-blue-800"
                        data-sound-url={(sounds || []).find(s => s.id === mapping.soundId)?.file_path}
                        data-storage-path={(sounds || []).find(s => s.id === mapping.soundId)?.storage_path}
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
                        </svg>
                    </button>

                    <!-- Remove Button -->
                    <button
                        type="button"
                        class="remove-mapping text-red-600 hover:text-red-800"
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            ))}
        </div>

        <!-- Add Mapping Button -->
        <button
            type="button"
            id="add-mapping"
            class={`mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md ${
                sounds.length === 0 || functions.length === 0
                ? 'text-gray-400 bg-gray-100 cursor-not-allowed'
                : 'text-blue-700 bg-blue-100 hover:bg-blue-200'
            }`}
            disabled={sounds.length === 0}
            title={sounds.length === 0 ? 'Please add sounds first' : 'Add new sound mapping'}
        >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
            </svg>
            Add Sound Mapping
        </button>
    </div>
</div>

<script>
    import type { Database } from '../../types/database';
    
    let currentAudio: HTMLAudioElement | null = null;

    declare global {
        interface Window {
            supabase: typeof import('../../lib/supabase').supabase;
            Sortable: new (element: HTMLElement, options: any) => any;
        }
    }

    // Listen for function changes
    document.addEventListener('surveyFunctionsChanged', async () => {
        try {
            // Fetch updated functions
            const { data: functionsData, error: functionsError } = await window.supabase
                .from('survey_sounds')
                .select('intended_function')
                .eq('survey_id', document.getElementById('mapping-container')?.dataset.surveyId)
                .not('intended_function', 'is', null)
                .order('intended_function');

            if (functionsError) throw functionsError;

            // Update functions data
            const uniqueFunctions = [...new Set(functionsData?.map((f: { intended_function: string }) => f.intended_function) || [])];
            const functions = uniqueFunctions.map(func => ({
                id: func,
                description: func
            }));

            // Update the container's data
            const container = document.getElementById('mapping-container');
            if (container) {
                container.dataset.functions = JSON.stringify(functions);
                
                // Enable/disable add button based on functions availability
                const addButton = document.getElementById('add-mapping');
                if (addButton instanceof HTMLButtonElement) {
                    const hasSound = JSON.parse(container.dataset.sounds || '[]').length > 0;
                    const hasFunctions = functions.length > 0;
                    
                    addButton.disabled = !hasSound || !hasFunctions;
                    addButton.classList.toggle('text-gray-400', !hasSound || !hasFunctions);
                    addButton.classList.toggle('bg-gray-100', !hasSound || !hasFunctions);
                    addButton.classList.toggle('cursor-not-allowed', !hasSound || !hasFunctions);
                    addButton.classList.toggle('text-blue-700', hasSound && hasFunctions);
                    addButton.classList.toggle('bg-blue-100', hasSound && hasFunctions);
                    addButton.title = !hasSound
                        ? 'Please add sounds first'
                        : !hasFunctions
                            ? 'Please add functions first'
                            : 'Add new sound mapping';
                }
            }
        } catch (error) {
            console.error('Error updating functions:', error);
        }
    });

    // Initialize Sortable.js for drag-and-drop reordering
    const mappingContainer = document.getElementById('mapping-container');
    if (mappingContainer) {
        new (window as any).Sortable(mappingContainer, {
            animation: 150,
            handle: '.cursor-move',
            onEnd: updateMappingOrder
        });
    }

    // Initialize preview buttons
    document.querySelectorAll('.preview-sound').forEach(button => {
        attachPreviewListener(button as HTMLButtonElement);
    });

    // Handle adding new mapping
    const addButton = document.getElementById('add-mapping');
    if (addButton instanceof HTMLButtonElement) {
        addButton.addEventListener('click', () => {
            console.log('Add Sound Mapping button clicked');
            const container = document.getElementById('mapping-container');
            if (!container) return;
            
            type Sound = Database['public']['Tables']['sounds']['Row'];
            const sounds = JSON.parse(container.dataset.sounds || '[]') as Sound[];
            const functions = JSON.parse(container.dataset.functions || '[]') as { id: string; description: string; }[];
            
            if (sounds.length === 0 || functions.length === 0) {
                console.warn('Cannot create mapping: No sounds or functions available');
                return;
            }

            console.log('Available sounds:', sounds.length);
            console.log('Available functions:', functions.length);

            const newOrder = container.children.length;
            const mappingRow = createMappingRow(newOrder);
            if (mappingRow) {
                console.log('New mapping row created:', mappingRow);
                container.appendChild(mappingRow);
            }
        });
    }

    // Handle removing mapping
    document.addEventListener('click', (e) => {
        if ((e.target as HTMLElement).closest('.remove-mapping')) {
            const row = (e.target as HTMLElement).closest('.mapping-row');
            row?.remove();
            updateMappingOrder();
        }
    });

    // Update mapping order after drag-and-drop
    function updateMappingOrder(): void {
        const container = document.getElementById('mapping-container');
        if (!container) return;

        const rows = container.querySelectorAll<HTMLElement>('.mapping-row');
        rows.forEach((row, index) => {
            row.dataset.order = index.toString();
            
            // Update any visual indicators of order if needed
            const orderIndicator = row.querySelector('.order-indicator');
            if (orderIndicator instanceof HTMLElement) {
                orderIndicator.textContent = (index + 1).toString();
            }
        });

        // Dispatch event to notify of order changes
        container.dispatchEvent(new CustomEvent('mappingOrderChanged', {
            detail: {
                newOrder: Array.from(rows).map(row => ({
                    id: row.dataset.mappingId,
                    order: parseInt(row.dataset.order || '0', 10)
                }))
            }
        }));
    }

    // Attach preview button listener
    function attachPreviewListener(button: HTMLButtonElement) {
        // Remove existing listeners to prevent duplicates
        const newButton = button.cloneNode(true) as HTMLButtonElement;
        button.parentNode?.replaceChild(newButton, button);

        newButton.addEventListener('click', async () => {
            const url = newButton.dataset.soundUrl;
            
            if (!url) {
                console.warn('No sound URL available for preview');
                return;
            }

            try {
                if (currentAudio) {
                    currentAudio.pause();
                    currentAudio.currentTime = 0;
                }

                // If clicking the same sound that's playing, just stop
                if (currentAudio?.src === url) {
                    currentAudio = null;
                    return;
                }

                currentAudio = new Audio(url);
                
                // Set up error handling before attempting to play
                currentAudio.onerror = (e) => {
                    console.error('Audio error:', e);
                    currentAudio = null;
                };

                currentAudio.onended = () => {
                    currentAudio = null;
                };

                await currentAudio.play();
            } catch (error) {
                console.error('Error playing audio:', error);
                currentAudio = null;
            }
        });
    }

    // Create new mapping row
    function createMappingRow(order: number): HTMLElement | null {
        console.log('Creating mapping row with order:', order);
        const template = document.createElement('template');
        const container = document.getElementById('mapping-container');
        if (!container) return null;

        type Sound = Database['public']['Tables']['sounds']['Row'];
        const sounds = JSON.parse(container.dataset.sounds || '[]') as Sound[];
        const functions = JSON.parse(container.dataset.functions || '[]') as { id: string; description: string; }[];
        
        const soundOptions = sounds
            .map(sound => `<option value="${sound.id}" data-sound-url="${sound.file_path || ''}" data-storage-path="${sound.storage_path || ''}">${sound.name}</option>`)
            .join('');

        const functionOptions = functions
            .map(func => `<option value="${func.id}">${func.description}</option>`)
            .join('');

        template.innerHTML = `
            <div
                class="mapping-row bg-gray-50 p-4 rounded-md flex items-center space-x-4"
                data-order="${order}"
            >
                <div class="cursor-move">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M3 7a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 6a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd" />
                    </svg>
                </div>
                <div class="flex-1">
                    <select class="sound-select w-full rounded-md border-gray-300">
                        <option value="">Select Sound</option>
                        ${soundOptions}
                    </select>
                </div>
                <div class="flex-1">
                    ${functions.length > 0 ? `
                        <select class="function-select w-full rounded-md border-gray-300">
                            <option value="">Select Function</option>
                            ${functionOptions}
                        </select>
                    ` : `
                        <input
                            type="text"
                            class="function-input w-full rounded-md border-gray-300"
                            placeholder="Enter sound function"
                        />
                    `}
                </div>
                <button
                    type="button"
                    class="preview-sound p-2 text-blue-600 hover:text-blue-800"
                    data-sound-url=""
                    data-storage-path=""
                >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
                    </svg>
                </button>
                <button
                    type="button"
                    class="remove-mapping text-red-600 hover:text-red-800"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </button>
            </div>
        `;
        const newRow = template.content.firstElementChild as HTMLElement;
        const previewButton = newRow.querySelector('.preview-sound') as HTMLButtonElement;
        if (previewButton) {
            attachPreviewListener(previewButton);
        }
        return newRow;
    }

    // Handle sound selection change
    document.addEventListener('change', (e: Event) => {
        const target = e.target;
        if (!(target instanceof HTMLSelectElement)) return;
        if (!target.classList.contains('sound-select')) return;

        const row = target.closest('.mapping-row');
        if (!row) return;

        const previewButton = row.querySelector('.preview-sound');
        if (!(previewButton instanceof HTMLButtonElement)) return;

        const selectedOption = target.selectedOptions[0];
        if (!selectedOption) return;

        const soundUrl = selectedOption.getAttribute('data-sound-url');
        const storagePath = selectedOption.getAttribute('data-storage-path');

        previewButton.dataset.soundUrl = soundUrl || '';
        previewButton.dataset.storagePath = storagePath || '';

        // Reattach preview listener with new URL
        attachPreviewListener(previewButton);
    });

    // Handle cleanup
    function cleanup(): void {
        if (currentAudio) {
            try {
                currentAudio.pause();
                currentAudio.src = '';
                currentAudio.load();
            } catch (error) {
                console.error('Error cleaning up audio:', error);
            }
            currentAudio = null;
        }
    }

    // Cleanup on page unload
    window.addEventListener('beforeunload', cleanup);

    // Cleanup on component unmount
    document.addEventListener('astro:unmount', cleanup);

    // Cleanup on navigation
    document.addEventListener('astro:page-load', cleanup);

    // Cleanup audio on page unload
    window.addEventListener('beforeunload', () => {
        if (currentAudio) {
            currentAudio.pause();
            currentAudio = null;
        }
    });
</script>