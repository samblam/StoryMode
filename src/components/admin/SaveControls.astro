---
interface Props {
    surveyId: string;
    active: boolean;
}

const { surveyId, active } = Astro.props;
const isPublished = active;
---

<div class="bg-white p-6 rounded-lg shadow">
    <div class="flex items-center justify-between">
        <div>
            <h3 class="text-lg font-semibold">Survey Controls</h3>
            <p class="text-sm text-gray-600 mt-1">
                {isPublished ? 'Survey is currently published' : 'Survey is currently in draft'}
            </p>
        </div>
        
        <div class="flex items-center space-x-4">
            <!-- Save Button -->
            <button
                type="button"
                id="save-survey"
                class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M7.707 10.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 1 00-1.414-1.414L11 11.586V6h-2v5.586l-1.293-1.293z" />
                </svg>
                Save Changes
            </button>

            <!-- Publish/Unpublish Button -->
            <button
                type="button"
                id="toggle-publish"
                class={`inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium ${
                    isPublished
                        ? 'text-gray-700 bg-gray-100 hover:bg-gray-200'
                        : 'text-white bg-green-600 hover:bg-green-700'
                } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500`}
                data-survey-id={surveyId}
                data-is-published={isPublished}
            >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" viewBox="0 0 20 20" fill="currentColor">
                    {isPublished ? (
                        <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                    ) : (
                        <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                        <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd" />
                    )}
                </svg>
                {isPublished ? 'Unpublish Survey' : 'Publish Survey'}
            </button>
        </div>
    </div>

    <!-- Status Messages -->
    <div id="status-message" class="mt-4 hidden">
        <p class="text-sm font-medium"></p>
    </div>
</div>

<script>
    // Get survey ID from data attribute
    const saveButton = document.getElementById('save-survey');
    const publishButton = document.getElementById('toggle-publish');
    const statusMessage = document.getElementById('status-message');
    const statusText = statusMessage?.querySelector('p');
    const surveyId = publishButton?.dataset.surveyId;

    import { saveSurveyData, publishSurvey, unpublishSurvey } from '../../utils/surveyDataManager';

    function showStatus(message: string, isError = false) {
        if (statusMessage && statusText) {
            statusText.textContent = message;
            statusText.className = `text-sm font-medium ${isError ? 'text-red-600' : 'text-green-600'}`;
            statusMessage.classList.remove('hidden');
            setTimeout(() => {
                statusMessage.classList.add('hidden');
            }, 5000);
        }
    }

    // Handle save
    saveButton?.addEventListener('click', async () => {
        try {
            // Get current form data and ensure surveyId is included
            const form = document.querySelector('form');
            if (!form) {
                throw new Error('Form not found');
            }
            const formData = new FormData(form);
            const surveyData = {
                id: surveyId, // Ensure surveyId is included
                ...Object.fromEntries(formData)
            };

            // Get auth token from cookie
            const token = document.cookie
                .split('; ')
                .find(row => row.startsWith('sb-token='))
                ?.split('=')[1];

            if (!token) {
                throw new Error('No authentication token found');
            }

            // Save survey data with token and baseUrl
            const baseUrl = window.location.origin;
            await saveSurveyData(surveyData, baseUrl, token);
            showStatus('Survey saved successfully');

            // Dispatch save event
            window.dispatchEvent(new CustomEvent('survey-saved'));
        } catch (error) {
            console.error('Save error:', error);
            showStatus('Failed to save survey. Please try again.', true);
        }
    });

    // Handle publish/unpublish
    publishButton?.addEventListener('click', async () => {
        const surveyId = publishButton.dataset.surveyId;
        const isPublished = publishButton.dataset.isPublished === 'true';

        if (!surveyId) return;

        try {
            // Get auth token
            const token = document.cookie
                .split('; ')
                .find(row => row.startsWith('sb-token='))
                ?.split('=')[1];

            if (!token) {
                throw new Error('No authentication token found');
            }

            const baseUrl = window.location.origin;
            
            if (isPublished) {
                await unpublishSurvey(surveyId, baseUrl, token);
                showStatus('Survey unpublished successfully');
            } else {
                await publishSurvey(surveyId, baseUrl, token);
                showStatus('Survey published successfully');
            }

            // Refresh the page to update the UI
            window.location.reload();
        } catch (error) {
            console.error('Publish/unpublish error:', error);
            showStatus(`Failed to ${isPublished ? 'unpublish' : 'publish'} survey. Please try again.`, true);
        }
    });

    // Listen for video upload completion
    window.addEventListener('video-uploaded', () => {
        showStatus('Video uploaded successfully. Remember to save your changes.');
    });
</script>