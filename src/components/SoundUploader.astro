---
import { getSoundProfiles } from '../utils/profileUtils';
import type { Database } from '../types/database';

type SoundProfile = Database['public']['Tables']['sound_profiles']['Row'];

// Add comprehensive logging for debugging
console.log('[SoundUploader] Starting component initialization...');

let profiles: SoundProfile[] = [];
let profileError: string | null = null;

try {
  console.log('[SoundUploader] Calling getSoundProfiles()...');
  const profileResponse = await getSoundProfiles();
  console.log('[SoundUploader] getSoundProfiles() response:', {
    hasData: !!profileResponse.data,
    dataLength: profileResponse.data?.length || 0,
    error: profileResponse.error,
    fullResponse: profileResponse
  });
  
  if (profileResponse.error) {
    console.error('[SoundUploader] Error from getSoundProfiles():', profileResponse.error);
    profileError = profileResponse.error;
    profiles = [];
  } else {
    profiles = profileResponse.data || [];
    console.log('[SoundUploader] Successfully loaded profiles:', profiles.length);
  }
} catch (error) {
  console.error('[SoundUploader] Exception in getSoundProfiles():', error);
  profileError = error instanceof Error ? error.message : 'Unknown error loading profiles';
  profiles = [];
}

console.log('[SoundUploader] Component initialization complete. Profiles available:', profiles.length);
---

<div class="bg-white rounded-lg shadow-lg p-6 mb-8">
  <h3 class="text-2xl font-editorial mb-4">Upload New Sound</h3>
  
  {profileError && (
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
      <strong>Error loading sound profiles:</strong> {profileError}
      <br />
      <small>Please check the server logs for more details.</small>
    </div>
  )}
  
  <form id="upload-form" class="space-y-4">
    <div>
      <label for="profileId" class="block text-lg mb-2">Sound Profile</label>
      <select
        id="profileId"
        name="profileId"
        required
        class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400"
        disabled={profileError || profiles.length === 0}
      >
        <option value="">
          {profileError ? 'Error loading profiles' :
           profiles.length === 0 ? 'No profiles available' :
           'Select a profile'}
        </option>
        {profiles.map(profile => (
          <option value={profile.id} data-slug={profile.slug}>
            {profile.title}
          </option>
        ))}
      </select>
      <p class="text-sm text-gray-600 mt-1">
        {profileError ? 'Fix the error above to continue' : 'Choose which profile this sound belongs to'}
      </p>
      {profiles.length === 0 && !profileError && (
        <p class="text-sm text-yellow-600 mt-1">No sound profiles found. Create a profile first.</p>
      )}
    </div>

    <div>
      <label for="name" class="block text-lg mb-2">Sound Name</label>
      <input 
        type="text" 
        id="name" 
        name="name" 
        required 
        minlength="2"
        maxlength="50"
        pattern="[A-Za-z0-9\s\-]+"
        class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400"
        placeholder="e.g., Bubble Pop"
      />
      <p class="text-sm text-gray-600 mt-1">2-50 characters, letters, numbers, spaces, and hyphens only</p>
    </div>

    <div>
      <label for="description" class="block text-lg mb-2">Description</label>
      <textarea 
        id="description" 
        name="description" 
        required 
        minlength="10"
        maxlength="200"
        class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400"
        placeholder="Brief description of the sound"
      ></textarea>
      <p class="text-sm text-gray-600 mt-1">10-200 characters</p>
    </div>

    <div>
      <label for="sound" class="block text-lg mb-2">Sound File</label>
      <input 
        type="file" 
        id="sound" 
        name="sound" 
        accept="audio/mpeg,audio/wav,audio/ogg" 
        required 
        class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400"
      />
      <p class="text-sm text-gray-600 mt-1">MP3, WAV, or OGG format only, max 50MB</p>
    </div>

    <div class="flex space-x-4">
      <button 
        type="submit" 
        class="bg-green-400 text-white px-8 py-3 rounded-lg text-lg hover:bg-green-500 transition-colors"
      >
        Upload Sound
      </button>
      <a 
        href="/sounds" 
        class="bg-gray-400 text-white px-8 py-3 rounded-lg text-lg hover:bg-gray-500 transition-colors"
      >
        Cancel
      </a>
    </div>
  </form>

  <div id="upload-progress" class="mt-4 hidden">
    <div class="w-full bg-gray-200 rounded-full h-2.5">
      <div class="bg-green-400 h-2.5 rounded-full" style="width: 0%"></div>
    </div>
    <p class="text-sm text-gray-600 mt-1">Uploading: <span>0%</span></p>
  </div>
</div>

<script>
  const form = document.getElementById('upload-form') as HTMLFormElement;
  const profileSelect = form?.querySelector('#profileId') as HTMLSelectElement;
  const progressBar = document.querySelector('#upload-progress div') as HTMLElement;
  const progressText = document.querySelector('#upload-progress span') as HTMLElement;
  const progressContainer = document.getElementById('upload-progress') as HTMLElement;

  const validateFile = (file: File): string | null => {
    if (!file) {
      return 'Please select a sound file to upload';
    }

    const maxSize = 50 * 1024 * 1024; // 50MB
    if (!file.type.startsWith('audio/')) {
      return `Invalid file type: ${file.type}. Please upload an audio file only.`;
    }
    if (file.size > maxSize) {
      const sizeMB = (file.size / (1024 * 1024)).toFixed(2);
      return `File size (${sizeMB}MB) exceeds the 50MB limit.`;
    }
    return null;
  };

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    try {
      const formData = new FormData(form);
      const file = formData.get('sound') as File;
      const selectedOption = profileSelect.selectedOptions[0];
      const profileSlug = selectedOption?.getAttribute('data-slug');

      if (!profileSlug) {
        throw new Error('Please select a sound profile');
      }

      // Add the profile slug to form data
      formData.append('profileSlug', profileSlug);

      // Show progress bar
      progressContainer.classList.remove('hidden');
      progressBar.style.width = '0%';
      progressText.textContent = '0%';

      // Validate file
      const fileError = validateFile(file);
      if (fileError) {
        throw new Error(fileError);
      }

      // Disable submit button
      const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
      submitButton.disabled = true;
      submitButton.textContent = 'Uploading...';

      // Upload file
      const response = await fetch('/api/sounds/upload', {
        method: 'POST',
        credentials: 'include', // Include cookies in the request
        body: formData,
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || 'Upload failed');
      }

      // Redirect with success message
      window.location.href = `/sounds?success=${encodeURIComponent('Sound uploaded successfully!')}`;
    } catch (error) {
      progressContainer.classList.add('hidden');
      const errorMessage = error instanceof Error ? error.message : 'Upload failed';
      alert(errorMessage);
      console.error('Upload error:', error);

      if (errorMessage.includes('Authentication') || errorMessage.includes('Unauthorized')) {
        // If it's an auth error, redirect to login
        window.location.href = '/login';
        return;
      }

      // Re-enable submit button
      const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
      submitButton.disabled = false;
      submitButton.textContent = 'Upload Sound';
    }
  });

  // Live file validation
  const fileInput = form?.querySelector('#sound') as HTMLInputElement;
  fileInput?.addEventListener('change', () => {
    const file = fileInput.files?.[0];
    if (file) {
      const error = validateFile(file);
      if (error) {
        fileInput.value = '';
        alert(error);
      }
    }
  });
</script>