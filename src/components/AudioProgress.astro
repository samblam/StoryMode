---
interface Props {
  soundId: string;
    storagePath: string;
}

const { soundId, storagePath } = Astro.props;
---

<div class="flex flex-col w-full space-y-2" data-component-id={soundId}>
  <div class="flex items-center space-x-4">
    <span class="current-time text-sm text-gray-600 w-12">0:00</span>
    <div 
      class="relative flex-grow h-2 bg-gray-200 rounded cursor-pointer progress-bar group" 
      data-sound-id={soundId}
    >
      <div class="absolute h-full bg-green-400 rounded progress-fill" style="width: 0%"></div>
      <div 
        class="absolute top-1/2 -mt-2 -ml-2 w-4 h-4 bg-white rounded-full shadow-md opacity-0 group-hover:opacity-100 cursor-grab active:cursor-grabbing handle transition-opacity duration-200"
        style="left: 0%"
      ></div>
    </div>
    <span class="duration text-sm text-gray-600 w-12">0:00</span>
  </div>
</div>

<script>
  import { audioManager } from '../utils/audioManager';

  class AudioProgressController {
    private progressBar: HTMLElement;
    private progressFill: HTMLElement;
    private handle: HTMLElement;
    private currentTimeEl: HTMLElement;
    private durationEl: HTMLElement;
    private soundId: string;
    private storagePath: string;
    private isDragging: boolean = false;
    private updateInterval: number | null = null;

    constructor(progressBar: HTMLElement, storagePath: string) {
      this.progressBar = progressBar;
      this.soundId = progressBar.dataset.soundId || '';
      this.storagePath = storagePath;
      this.progressFill = progressBar.querySelector('.progress-fill') as HTMLElement;
      this.handle = progressBar.querySelector('.handle') as HTMLElement;
      this.currentTimeEl = progressBar.parentElement?.querySelector('.current-time') as HTMLElement;
      this.durationEl = progressBar.parentElement?.querySelector('.duration') as HTMLElement;

      this.validateAndInitialize();
    }

    private validateAndInitialize(): void {
      if (!this.progressBar || !this.progressFill || !this.handle || !this.currentTimeEl || !this.durationEl) {
        console.error('Required elements not found for progress bar');
        return;
      }

      this.initializeEventListeners();
      this.startProgressTracking();
    }

    private formatTime(seconds: number): string {
      const mins = Math.floor(seconds / 60);
      const secs = Math.floor(seconds % 60);
      return `${mins}:${secs.toString().padStart(2, '0')}`;
    }

    private updateProgressBar(percentage: number): void {
      percentage = Math.max(0, Math.min(100, percentage));
      this.progressFill.style.width = `${percentage}%`;
      this.handle.style.left = `${percentage}%`;
    }

    private updateTimeDisplay(currentTime: number, duration: number): void {
      this.currentTimeEl.textContent = this.formatTime(currentTime);
      this.durationEl.textContent = this.formatTime(duration);
    }

    private async seekAudio(percentage: number): Promise<void> {
      const sound = await audioManager.getSound(this.soundId, this.storagePath);
      if (!sound) return;

      const duration = sound.duration();
      if (duration) {
        const seekTime = duration * (percentage / 100);
        sound.seek(seekTime);
        this.updateTimeDisplay(seekTime, duration);
      }
    }

    private handleMouseDown = (e: MouseEvent): void => {
      e.preventDefault();
      this.isDragging = true;
      this.handle.classList.add('opacity-100');
      this.updateFromMouseEvent(e);
      
      document.addEventListener('mousemove', this.handleMouseMove);
      document.addEventListener('mouseup', this.handleMouseUp);
    };

    private handleMouseMove = (e: MouseEvent): void => {
      if (!this.isDragging) return;
      this.updateFromMouseEvent(e);
    };

    private handleMouseUp = (): void => {
      if (!this.isDragging) return;
      this.isDragging = false;
      
      if (!audioManager.isPlaying()) {
        this.handle.classList.remove('opacity-100');
      }

      document.removeEventListener('mousemove', this.handleMouseMove);
      document.removeEventListener('mouseup', this.handleMouseUp);
    };

    private updateFromMouseEvent(e: MouseEvent): void {
      const rect = this.progressBar.getBoundingClientRect();
      const x = Math.max(0, Math.min(e.clientX - rect.left, rect.width));
      const percentage = (x / rect.width) * 100;
      
      this.updateProgressBar(percentage);
      this.seekAudio(percentage);
    }

    private initializeEventListeners(): void {
      this.progressBar.addEventListener('mousedown', this.handleMouseDown);
      
      // Reset progress on audio end
      document.addEventListener('audioend', (e: Event) => {
        const customEvent = e as CustomEvent;
        if (customEvent.detail.soundId === this.soundId) {
          this.updateProgressBar(0);
          this.updateTimeDisplay(0, customEvent.detail.duration || 0);
          this.handle.classList.remove('opacity-100');
        }
      });
    }

    private startProgressTracking(): void {
      this.updateInterval = window.setInterval(async () => {
        if (this.isDragging) return;

        try {
          const sound = await audioManager.getSound(this.soundId, this.storagePath);
          if (!sound || !sound.playing()) return;

          const seek = sound.seek() as number;
          const duration = sound.duration();

          if (duration > 0) {
            const percentage = (seek / duration) * 100;
            this.updateProgressBar(percentage);
            this.updateTimeDisplay(seek, duration);
            this.handle.classList.add('opacity-100');
          }
        } catch (error) {
          console.error('Error updating progress:', error);
        }
      }, 100);
    }

    public cleanup(): void {
      if (this.updateInterval) {
        window.clearInterval(this.updateInterval);
      }
      
      this.progressBar.removeEventListener('mousedown', this.handleMouseDown);
      document.removeEventListener('mousemove', this.handleMouseMove);
      document.removeEventListener('mouseup', this.handleMouseUp);
    }
  }

  // Initialize progress bars
  const controllers = new Map<string, AudioProgressController>();

  document.querySelectorAll('.progress-bar[data-sound-id]').forEach(progressBar => {
    if (progressBar instanceof HTMLElement) {
      const soundId = progressBar.dataset.soundId;
            const storagePath = (progressBar.closest('.border')?.querySelector('.play-button') as HTMLElement)?.dataset.storagePath;

      if (soundId && storagePath) {
        const controller = new AudioProgressController(progressBar, storagePath);
        controllers.set(soundId, controller);
      }
    }
  });

  // Cleanup on page unload
  window.addEventListener('unload', () => {
    controllers.forEach(controller => controller.cleanup());
    controllers.clear();
  });
</script>