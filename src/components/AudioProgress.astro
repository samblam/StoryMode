---
interface Props {
  soundId: string;
}

const { soundId } = Astro.props;
---

<div class="flex flex-col w-full space-y-2">
  <div class="flex items-center space-x-4">
    <span class="current-time text-sm text-gray-600 w-12">0:00</span>
    <div 
      class="relative flex-grow h-2 bg-gray-200 rounded cursor-pointer progress-bar group" 
      data-sound-id={soundId}
    >
      <div class="absolute h-full bg-green-400 rounded progress-fill" style="width: 0%"></div>
      <!-- Handle that appears on hover or during playback -->
      <div 
        class="absolute top-1/2 -mt-2 -ml-2 w-4 h-4 bg-white rounded-full shadow-md opacity-0 group-hover:opacity-100 cursor-grab active:cursor-grabbing handle transition-opacity duration-200"
        style="left: 0%"
      ></div>
    </div>
    <span class="duration text-sm text-gray-600 w-12">0:00</span>
  </div>
</div>

<script>
  import { audioManager } from '../utils/audioManager';

  function formatTime(seconds: number): string {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  }

  // Setup progress tracking for each audio progress bar
  function setupProgressBar(progressBar: HTMLElement) {
    const soundId = progressBar.dataset.soundId;
    if (!soundId) return;

    const progressFill = progressBar.querySelector('.progress-fill') as HTMLElement;
    const handle = progressBar.querySelector('.handle') as HTMLElement;
    const currentTimeEl = progressBar.parentElement?.querySelector('.current-time');
    const durationEl = progressBar.parentElement?.querySelector('.duration');

    if (!progressFill || !handle || !currentTimeEl || !durationEl) return;

    let isDragging = false;
    let updateInterval: number;

    // Update visual elements (progress fill and handle)
    function updateVisuals(percentage: number) {
      progressFill.style.width = `${percentage}%`;
      handle.style.left = `${percentage}%`;
    }

    // Handle mouse events for seeking
    progressBar.addEventListener('mousedown', (e) => {
      e.preventDefault();
      isDragging = true;
      handle.classList.add('opacity-100');
      updateFromMouseEvent(e);
      
      // Add temporary event listeners
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
    });

    function handleMouseMove(e: MouseEvent) {
      if (!isDragging) return;
      updateFromMouseEvent(e);
    }

    function handleMouseUp() {
      isDragging = false;
      if (!audioManager.getSound(soundId).playing()) {
        handle.classList.remove('opacity-100');
      }
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    }

    function updateFromMouseEvent(e: MouseEvent) {
      const rect = progressBar.getBoundingClientRect();
      const x = Math.max(0, Math.min(e.clientX - rect.left, rect.width));
      const percentage = (x / rect.width) * 100;
      
      updateVisuals(percentage);

      const sound = audioManager.getSound(soundId);
      if (sound) {
        const duration = sound.duration();
        sound.seek(duration * (percentage / 100));
      }
    }

    // Update progress while playing
    function startTracking() {
      updateInterval = window.setInterval(() => {
        if (isDragging) return;

        const sound = audioManager.getSound(soundId);
        if (!sound) return;

        if (sound.playing()) {
          handle.classList.add('opacity-100');
          const seek = sound.seek() as number;
          const duration = sound.duration();

          if (duration > 0) {
            const percentage = (seek / duration) * 100;
            updateVisuals(percentage);
            currentTimeEl.textContent = formatTime(seek);
            durationEl.textContent = formatTime(duration);
          }
        } else {
          handle.classList.remove('opacity-100');
        }
      }, 50); // More frequent updates for smoother animation
    }

    // Start tracking immediately
    startTracking();

    // Clean up on page unload
    window.addEventListener('unload', () => {
      clearInterval(updateInterval);
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    });
  }

  // Initialize all progress bars
  document.querySelectorAll('.progress-bar[data-sound-id]').forEach(progressBar => {
    if (progressBar instanceof HTMLElement) {
      setupProgressBar(progressBar);
    }
  });
</script>