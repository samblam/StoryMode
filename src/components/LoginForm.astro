---
---

<form id="login-form" class="w-full max-w-md mx-auto space-y-6">
  <div class="text-center">
    <h2 class="text-3xl font-editorial">Welcome Back</h2>
    <p class="text-gray-600 mt-2">Please sign in to continue</p>
  </div>

  <div>
    <label for="email" class="block text-lg mb-2">Email</label>
    <input
      type="email"
      id="email"
      name="email"
      data-rule="email"
      required
      class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-400"
      placeholder="you@example.com"
      autocomplete="email"
    />
  </div>

  <div>
    <label for="password" class="block text-lg mb-2">Password</label>
    <input
      type="password"
      id="password"
      name="password"
      data-rule="password"
      required
      minlength="8"
      class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-400"
      placeholder="••••••••"
      autocomplete="current-password"
    />
  </div>

  <div id="form-status" class="hidden">
    <p class="error hidden text-red-600 bg-red-50 p-3 rounded-lg"></p>
  </div>

  <div>
    <button type="submit" class="w-full py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-400 focus:ring-opacity-75">
      Sign In
    </button>
  </div>

  <div class="text-sm text-gray-600 text-center">
    <a href="/reset-password" class="hover:underline">Forgot your password?</a>
  </div>
</form>

<script>
  import type { ValidationError } from '../types/app';
  import { ValidationRules, validateInput } from '../utils/validation';
  import { setupValidation } from '../utils/clientValidation';

  interface FormErrors {
    [key: string]: string;
  }

  let errors: FormErrors = {};
  const form = document.getElementById('login-form') as HTMLFormElement;
  
  // Initialize validation
  setupValidation(validateInput);

  function updateErrorDisplay() {
    // Clear all existing error messages
    document.querySelectorAll('.error-message').forEach(el => el.remove());
    
    // Display new error messages
    Object.entries(errors).forEach(([field, message]) => {
      const input = document.querySelector(`[name="${field}"]`) as HTMLInputElement;
      if (input) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message text-red-600 text-sm mt-1';
        errorDiv.textContent = message;
        input.parentNode?.appendChild(errorDiv);
      }
    });

    // Show general errors at the top of the form
    const formStatus = document.getElementById('form-status');
    const errorElement = formStatus?.querySelector('.error');
    if (formStatus && errorElement) {
      if (errors.general) {
        formStatus.classList.remove('hidden');
        errorElement.classList.remove('hidden');
        errorElement.textContent = errors.general;
      } else {
        formStatus.classList.add('hidden');
        errorElement.classList.add('hidden');
      }
    }
  }

  // Add real-time validation
  const inputs = form?.querySelectorAll('input');
  inputs?.forEach(input => {
    const fieldInput = input as HTMLInputElement;
    fieldInput.addEventListener('blur', () => {
      const field = fieldInput.getAttribute('name');
      if (!field) return;
      
      const rule = fieldInput.getAttribute('data-rule') as keyof typeof ValidationRules;
      if (!rule) return;
      
      try {
        const error = validateInput(fieldInput.value, rule);
        if (error) {
          errors[field] = error;
        } else {
          delete errors[field];
        }
        updateErrorDisplay();
      } catch (error) {
        console.error('Validation error:', error);
      }
    });
  });

  let isSubmitting = false;

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    if (isSubmitting) return;
    isSubmitting = true;

    // Reset errors
    errors = {};
    updateErrorDisplay();
    
    // Disable submit button
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    submitButton.disabled = true;
    submitButton.textContent = 'Signing In...';

    try {
      const formData = new FormData(form);
      const data = {
        email: formData.get('email')?.toString() || '',
        password: formData.get('password')?.toString() || ''
      };

      // Validate before submitting
      const emailError = validateInput(data.email, 'email');
      const passwordError = validateInput(data.password, 'password');

      if (emailError || passwordError) {
        if (emailError) errors.email = emailError;
        if (passwordError) errors.password = passwordError;
        updateErrorDisplay();
        return;
      }

      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        if (result.errors) {
          result.errors.forEach((error: ValidationError) => {
            errors[error.field] = error.message;
          });
        } else if (result.error) {
          errors.general = result.error;
        }
        updateErrorDisplay();
        return;
      }

      if (result.success) {
        // Clear any existing errors
        errors = {};
        updateErrorDisplay();

        // Redirect to home page
        window.location.href = '/';
      } else {
        errors.general = result.error || 'Login failed. Please try again.';
        updateErrorDisplay();
      }
    } catch (error: any) {
      errors.general = 'An unexpected error occurred. Please try again.';
      updateErrorDisplay();
    } finally {
      isSubmitting = false;
      submitButton.disabled = false;
      submitButton.textContent = 'Sign In';
    }
  });
</script>