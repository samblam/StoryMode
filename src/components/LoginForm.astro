---
---

<form id="login-form" class="w-full max-w-md mx-auto space-y-6">
  <div class="text-center">
    <h2 class="text-3xl font-editorial">Welcome Back</h2>
    <p class="text-gray-600 mt-2">Please sign in to continue</p>
  </div>

  <div>
    <label for="email" class="block text-lg mb-2">Email</label>
    <input
      type="email"
      id="email"
      name="email"
      required
      class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-400"
      placeholder="you@example.com"
    />
  </div>

  <div>
    <label for="password" class="block text-lg mb-2">Password</label>
    <input
      type="password"
      id="password"
      name="password"
      required
      minlength="8"
      class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-400"
      placeholder="••••••••"
    />
  </div>

  <div id="form-status" class="hidden">
    <p class="error hidden text-red-600 bg-red-50 p-3 rounded-lg"></p>
  </div>

  <div>
    <button type="submit" class="w-full py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-400 focus:ring-opacity-75">
      Sign In
    </button>
  </div>

  <div class="text-sm text-gray-600 text-center">
    <a href="/reset-password" class="hover:underline">Forgot your password?</a>
  </div>
</form>

<script>
  interface SubmitResponse {
    success: boolean;
    error?: string;
  }

  const form = document.getElementById('login-form') as HTMLFormElement;
  const formStatus = document.getElementById('form-status');
  const errorMessage = formStatus?.querySelector('.error');

  interface FormDataObject {
    email: string;
    password: string;
  }

  const validateForm = (formData: FormDataObject): string | null => {
    const email = formData.email || '';
    const password = formData.password || '';

    const emailError = window.validateInput(email, 'email');
    if (emailError) return emailError;

    const passwordError = window.validateInput(password, 'password');
    if (passwordError) return passwordError;

    return null;
  };

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Reset error message
    formStatus?.classList.add('hidden');
    errorMessage?.classList.add('hidden');

    // Disable submit button
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    submitButton.disabled = true;
    submitButton.textContent = 'Signing In...';

    try {
      const formData = new FormData(form);
      const data = {
        email: formData.get('email')?.toString() || '',
        password: formData.get('password')?.toString() || ''
      };

      const validationError = validateForm(data);
      if (validationError) {
        throw new Error(validationError);
      }

      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      const result = await response.json() as SubmitResponse;

      if (!response.ok) {
        throw new Error(result.error || `HTTP error! status: ${response.status}`);
      }

      if (result.success) {
        // Redirect to home page or intended page
        window.location.href = '/';
      } else {
        throw new Error(result.error || 'Login failed');
      }
    } catch (error: any) {
      console.error('Login error:', error);
      formStatus?.classList.remove('hidden');
      if (errorMessage && error instanceof Error) {
        errorMessage.textContent = error.message;
      }
    } finally {
      // Re-enable submit button
      submitButton.disabled = false;
      submitButton.textContent = 'Sign In';
    }
  });
</script>