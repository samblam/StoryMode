---
import SurveyLayout from '../../components/SurveyLayout.astro';
import { getClient } from '../../lib/supabase';
import { getSignedUrl } from '../../utils/storageUtils';
import type { User } from '../../types/auth';

const { id } = Astro.params;
const user = Astro.locals.user as User | undefined;

// Check if this is a preview
const url = new URL(Astro.request.url);
const isPreview = url.searchParams.get('preview') === 'true';
const previewContextParam = url.searchParams.get('context');
const previewContext = isPreview && previewContextParam ? JSON.parse(decodeURIComponent(previewContextParam)) : null;

// Only redirect if not logged in and not in preview mode
if (!user && !isPreview) {
    return Astro.redirect('/login');
}

let survey;
let error;

// Use preview context if available, otherwise fetch from database
if (isPreview && previewContext) {
    survey = previewContext.survey;
} else {
    // Get survey data from database
    const supabase = getClient();
    const result = await supabase
        .from('surveys')
        .select(`
            *,
            client:clients (
                id,
                name,
                email
            ),
            survey_sounds (
                id,
                sound_id,
                intended_function,
                order_index,
                sounds (
                    id,
                    name,
                    url
                )
            )
        `)
        .eq('id', id)
        .single();
    
    survey = result.data;
    error = result.error;

    // Only redirect for non-preview mode
    if (!isPreview && survey && survey.status !== 'completed') {
        return Astro.redirect(`/surveys/client-results`);
    }
    
    // Generate signed URL for video in non-preview mode
    if (survey && survey.video_url) {
        try {
            // Add a video object with URL property similar to preview mode
            survey.video = {
                url: await getSignedUrl(survey.video_url, 'videos')
            };
        } catch (error) {
            console.error('Error generating video URL:', error);
            // Continue without video if there's an error
        }
    }
}

if (error) {
    return new Response(JSON.stringify({ error: error.message }), {
        status: 500,
    });
}

if (!survey) {
    return new Response(JSON.stringify({ error: 'Survey not found' }), {
        status: 404,
    });
}

// Sort sounds by order_index
const sortedSounds = survey.survey_sounds.sort((a: any, b: any) => a.order_index - b.order_index);
---

<SurveyLayout
    title={isPreview ? `PREVIEW: ${survey.title}` : survey.title}
    description={survey.description}
    currentStep={1}
    totalSteps={sortedSounds.length}
>
    {isPreview && (
        <div class="preview-banner">
            <p>Preview Mode - Responses will not be saved</p>
        </div>
    )}
    <form id="survey-form" class="max-w-4xl mx-auto">
            {/* Video display using signed URL */}
            {survey.video && survey.video.url && (
                <div class="mb-8">
                    <video
                        src={survey.video.url}
                        controls
                        class="w-full rounded-lg shadow-lg"
                    >
                        Your browser does not support the video tag.
                    </video>
                </div>
            )}
    
            <div class="space-y-8">
                {sortedSounds.map((surveySound: any, index: number) => (
                    <div
                        class="p-6 bg-white rounded-lg shadow-md"
                        data-sound-id={surveySound.sound_id}
                        data-intended-function={surveySound.intended_function}
                    >
                        <h2 class="text-xl font-bold mb-4">Sound {index + 1}</h2>
                        <div class="flex items-center space-x-4 mb-4">
                            <button
                                type="button"
                                class="play-button px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                                data-url={surveySound.sounds.url}
                            >
                                Play Sound
                            </button>
                            <span class="text-gray-500">Click to play/pause</span>
                        </div>
                        <div class="space-y-4">
                            {/* Multiple choice options based on survey functions */}
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                    What do you think this sound represents?
                                </label>
                                <div class="space-y-2">
                                    {survey.functions && Array.isArray(survey.functions) ? (
                                        survey.functions.map((func: string) => (
                                            <label class="flex items-center space-x-2 p-2 rounded hover:bg-gray-50 cursor-pointer">
                                                <input
                                                    type="radio"
                                                    name={`sound-${surveySound.id}`}
                                                    value={func}
                                                    class="rounded-full text-blue-600 focus:ring-blue-500"
                                                    required
                                                />
                                                <span>{func}</span>
                                            </label>
                                        ))
                                    ) : (
                                        <p class="text-red-500">No options available</p>
                                    )}
                                </div>
                            </div>
                        </div>
                    </div>
                ))}
            </div>
            
            <div class="mt-8 text-center">
                <button
                    type="submit"
                    id="submit-survey"
                    class="px-6 py-3 bg-green-600 text-white font-medium rounded-md shadow-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors"
                >
                    Submit Survey
                </button>
            </div>
    </form>
    </div>
</SurveyLayout>
</SurveyLayout>

<style>
    .preview-banner {
        background-color: #f97316; /* Orange */
        color: white;
        text-align: center;
        padding: 0.5rem;
        margin-bottom: 1rem;
        border-radius: 0.375rem;
        font-weight: bold;
        position: sticky;
        top: 0;
        z-index: 10;
    }
</style>

<script define:vars={{ isPreview, survey, id }}>
    let currentAudio = null;

    // Initialize audio player
    document.querySelectorAll('.play-button').forEach(button => {
        button.addEventListener('click', () => {
            const url = button.dataset.url;
            if (!url) return;

            if (currentAudio) {
                currentAudio.pause();
                if (currentAudio.src === url) {
                    currentAudio = null;
                    return;
                }
            }

            currentAudio = new Audio(url);
            currentAudio.play();
        });
    });

    // Handle form submission
    document.getElementById('survey-form')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // If in preview mode, show message and don't save
        if (isPreview) {
            console.log('Preview mode - responses not saved');
            alert('Preview mode: Your responses would be submitted in the actual survey.');
            return;
        }
        
        try {
            // Get all sound elements
            const soundElements = document.querySelectorAll('[data-sound-id]');
            const responses = {};
            const soundMappingResponses = {};
            
            // Get data from form
            soundElements.forEach(element => {
                const soundId = element.getAttribute('data-sound-id');
                const intendedFunction = element.getAttribute('data-intended-function');
                
                if (soundId) {
                    // Get selected function (radio button value)
                    const selectedRadio = document.querySelector(`input[name="sound-${element.getAttribute('data-sound-id')}"]:checked`);
                    const selectedFunction = selectedRadio ? selectedRadio.value : null;
                    
                    // Record response
                    responses[soundId] = selectedFunction;
                    
                    // Record sound mapping if we have both values
                    if (selectedFunction && intendedFunction) {
                        soundMappingResponses[soundId] = {
                            actual: selectedFunction,
                            intended: intendedFunction,
                            matched: selectedFunction === intendedFunction
                        };
                    }
                }
            });
            
            // Get participant data - in a real implementation, this would be retrieved
            // from a token or URL parameter rather than hardcoded
            const participantData = {
                participantId: new URLSearchParams(window.location.search).get('participant_id') || 'unknown',
                participantToken: new URLSearchParams(window.location.search).get('token') || 'unknown'
            };
            
            // Submit the response
            const response = await fetch(`/api/surveys/${id}/responses`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ...participantData,
                    responses,
                    soundMappingResponses
                })
            });
            
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to submit survey');
            }
            
            // Show success message and redirect
            alert('Thank you! Your survey has been submitted successfully.');
            window.location.href = '/surveys/thank-you';
            
        } catch (error) {
            console.error('Error submitting survey:', error);
            alert(`Failed to submit survey: ${error.message}`);
        }
    });
    
    // Add a class to the body when in preview mode for potential global styling
    if (isPreview) {
        document.body.classList.add('preview-mode');
    }
</script>