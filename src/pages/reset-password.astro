---
import Layout from '../layouts/Layout.astro';

// Redirect if already logged in
const user = Astro.locals.user;
if (user) {
  return Astro.redirect('/sounds');
}
---

<Layout title="Reset Password | Story Mode">
  <main class="min-h-screen bg-gray-50 py-12">
    <div class="max-w-6xl mx-auto px-4">
      <div class="flex flex-col items-center justify-center min-h-[calc(100vh-16rem)]">
        <div class="mb-12 text-center">
          <h1 class="text-5xl font-editorial mb-4">Reset Password</h1>
          <p class="text-xl text-gray-600">Enter your email to receive a reset code</p>
        </div>

        <div class="w-full max-w-md bg-white rounded-lg shadow-lg p-8">
          <form id="reset-form" class="space-y-6">
            <div>
              <label for="email" class="block text-lg mb-2">Email</label>
              <input
                type="email"
                id="email"
                name="email"
                required
                class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-400"
                placeholder="you@example.com"
              />
            </div>

            <div id="form-status" class="hidden">
              <p class="success hidden text-green-600 bg-green-50 p-3 rounded-lg"></p>
              <p class="error hidden text-red-600 bg-red-50 p-3 rounded-lg"></p>
            </div>

            <button
              type="submit"
              class="w-full bg-green-400 text-white px-8 py-3 rounded-lg text-lg hover:bg-green-500 transition-colors"
            >
              Send Reset Code
            </button>

            <div class="text-center">
              <a href="/login" class="text-blue-600 hover:underline">Back to Login</a>
            </div>
          </form>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  const form = document.getElementById('reset-form') as HTMLFormElement;
  const formStatus = document.getElementById('form-status');
  const successMessage = formStatus?.querySelector('.success');
  const errorMessage = formStatus?.querySelector('.error');

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Reset status messages
    formStatus?.classList.add('hidden');
    successMessage?.classList.add('hidden');
    errorMessage?.classList.add('hidden');

    // Disable submit button
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    submitButton.disabled = true;
    submitButton.textContent = 'Sending...';

    try {
      const formData = new FormData(form);
      const email = formData.get('email')?.toString();

      if (!email) {
        throw new Error('Email is required');
      }

      const response = await fetch('/api/auth/send-reset-code', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || 'Failed to send reset code');
      }

      // Show success message and redirect
      formStatus?.classList.remove('hidden');
      successMessage?.classList.remove('hidden');
      if (successMessage) {
        successMessage.textContent = 'Reset code sent! Redirecting to verification page...';
      }

      // Redirect to verification page
      setTimeout(() => {
        window.location.href = `/reset-password/verify?email=${encodeURIComponent(email)}`;
      }, 2000);

    } catch (error) {
      console.error('Reset error:', error);
      formStatus?.classList.remove('hidden');
      errorMessage?.classList.remove('hidden');
      if (errorMessage) {
        errorMessage.textContent = error instanceof Error ? error.message : 'Failed to send reset code';
      }
    } finally {
      // Re-enable submit button
      submitButton.disabled = false;
      submitButton.textContent = 'Send Reset Code';
    }
  });
</script>