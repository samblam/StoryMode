---
import Layout from '../../../../layouts/Layout.astro';
import { getCurrentUser } from '../../../../utils/authUtils';
import { verifyAuthorization } from '../../../../utils/accessControl';
import { supabase } from '../../../../lib/supabase';

// Ensure admin access
const user = await getCurrentUser(Astro.cookies);
if (!user) {
  return Astro.redirect('/', 302);
}

const { authorized } = await verifyAuthorization(user, 'admin', 'admin');
if (!authorized) {
  return Astro.redirect('/', 302);
}

const { id } = Astro.params;

// Fetch survey data with responses
const { data: survey, error: surveyError } = await supabase
  .from('surveys')
  .select(`
    *,
    clients (
      id,
      name
    ),
    sound_profiles (
      id,
      title
    )
  `)
  .eq('id', id)
  .single();

if (surveyError || !survey) {
  return Astro.redirect('/admin/surveys', 302);
}

if (survey.status !== 'completed') {
  return Astro.redirect('/admin/surveys', 302);
}

// Fetch survey responses
const { data: responses } = await supabase
  .from('survey_responses')
  .select('*')
  .eq('survey_id', id)
  .order('created_at', { ascending: false });

// Calculate basic metrics
const totalResponses = responses?.length || 0;
const completedResponses = responses?.filter(r => r.status === 'completed').length || 0;
const completionRate = totalResponses ? (completedResponses / totalResponses * 100).toFixed(1) : 0;

---

<Layout title={`Survey Results: ${survey.title}`}>
  <div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-3xl font-bold">Survey Results: {survey.title}</h1>
      <div class="flex space-x-4">
        <button 
          id="exportPDF"
          class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
        >
          Export PDF
        </button>
        <button 
          id="exportCSV"
          class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded"
        >
          Export CSV
        </button>
      </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
      <!-- Summary Cards -->
      <div class="bg-white shadow rounded-lg p-6">
        <h3 class="text-lg font-semibold text-gray-700 mb-2">Total Responses</h3>
        <p class="text-3xl font-bold">{totalResponses}</p>
      </div>
      
      <div class="bg-white shadow rounded-lg p-6">
        <h3 class="text-lg font-semibold text-gray-700 mb-2">Completed</h3>
        <p class="text-3xl font-bold">{completedResponses}</p>
      </div>
      
      <div class="bg-white shadow rounded-lg p-6">
        <h3 class="text-lg font-semibold text-gray-700 mb-2">Completion Rate</h3>
        <p class="text-3xl font-bold">{completionRate}%</p>
      </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
      <!-- Sound-Function Correlation -->
      <div class="bg-white shadow rounded-lg p-6">
        <h2 class="text-xl font-semibold mb-4">Sound-Function Correlation</h2>
        <div >
          <canvas id="correlationChart" class="h-64"></canvas>
        </div>
      </div>

      <!-- Success Rates -->
      <div class="bg-white shadow rounded-lg p-6">
        <h2 class="text-xl font-semibold mb-4">Success Rates</h2>
        <div >
          <canvas id="successRateChart" class="h-64"></canvas>
        </div>
      </div>

      <!-- Response Timeline -->
      <div class="bg-white shadow rounded-lg p-6">
        <h2 class="text-xl font-semibold mb-4">Response Timeline</h2>
        <div >
          <canvas id="timelineChart" class="h-64"></canvas>
        </div>
      </div>

      <!-- Error Patterns -->
      <div class="bg-white shadow rounded-lg p-6">
        <h2 class="text-xl font-semibold mb-4">Error Patterns</h2>
        <div >
          <canvas id="errorPatternChart" class="h-64"></canvas>
        </div>
      </div>
    </div>

    <!-- Detailed Responses Table -->
    <div class="mt-8 bg-white shadow rounded-lg p-6">
      <h2 class="text-xl font-semibold mb-4">Detailed Responses</h2>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead>
            <tr>
              <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Date
              </th>
              <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Success Rate
              </th>
              <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Time Taken
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {responses?.map((response) => (
              <tr>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {new Date(response.created_at).toLocaleDateString()}
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${
                    response.status === 'completed' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                  }`}>
                    {response.status}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {response.success_rate ? `${(response.success_rate * 100).toFixed(1)}%` : 'N/A'}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {response.time_taken ? `${Math.round(response.time_taken / 1000)}s` : 'N/A'}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { Chart, registerables } from 'chart.js';
  import { generateCorrelationData, generateSuccessRateData, generateErrorPatternData, generateTimelineData } from '../../../../utils/surveyVisualization';
  
  Chart.register(...registerables);
  
  const surveyId = Astro.params.id;

  // Fetch survey responses and matches
  const fetchSurveyData = async () => {
    const response = await fetch(`/api/surveys/${surveyId}/results`);
    if (!response.ok) {
      console.error('Failed to fetch survey data');
      return null;
    }
    return await response.json();
  };

  fetchSurveyData().then(data => {
    if (!data) return;

    const { responses, matches } = data;

    // Generate and render charts
    const correlationData = generateCorrelationData(matches);
    const successRateData = generateSuccessRateData(responses);
    const errorPatternData = generateErrorPatternData(matches);
    const timelineData = generateTimelineData(responses);

    // Render charts
    const correlationCtx = document.getElementById('correlationChart') as HTMLCanvasElement;
    if (correlationCtx) {
      new Chart(correlationCtx, {
        type: 'bar',
        data: correlationData,
      });
    }

    const successRateCtx = document.getElementById('successRateChart') as HTMLCanvasElement;
    if (successRateCtx) {
      new Chart(successRateCtx, {
        type: 'line',
        data: successRateData,
      });
    }

    const timelineCtx = document.getElementById('timelineChart') as HTMLCanvasElement;
    if (timelineCtx) {
      new Chart(timelineCtx, {
        type: 'line',
        data: timelineData,
      });
    }

    const errorPatternCtx = document.getElementById('errorPatternChart') as HTMLCanvasElement;
    if (errorPatternCtx) {
      new Chart(errorPatternCtx, {
        type: 'bar',
        data: errorPatternData,
      });
    }
  });
</script>