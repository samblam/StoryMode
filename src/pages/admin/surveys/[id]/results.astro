---
import type { SurveyResponse } from '../../../../types/database';
import Layout from '../../../../layouts/Layout.astro';
import { getCurrentUser } from '../../../../utils/authUtils';
import { verifyAuthorization } from '../../../../utils/accessControl';
import { getClient } from '../../../../lib/supabase';
import AnalyticsDashboard from '../../../../components/AnalyticsDashboard.astro';
import ReportGenerator from '../../../../components/ReportGenerator.astro';
import StaticExporter from '../../../../components/StaticExporter.astro';
import { calculateSuccessMetrics, performSoundPerformanceAnalysis, trackParticipantBehavior } from '../../../../utils/surveyAnalytics';
import { prepareGraphData } from '../../../../utils/surveyResults';

// Ensure admin access
const user = await getCurrentUser(Astro.cookies);
if (!user) {
  return Astro.redirect('/', 302);
}

const { authorized } = await verifyAuthorization(user, 'admin', 'admin');
if (!authorized) {
  return Astro.redirect('/', 302);
}

const { id } = Astro.params;
if (!id) {
  return Astro.redirect('/admin/surveys', 302);
}

// Fetch survey data with responses
const supabaseAdmin = getClient({ requiresAdmin: true });
const { data: survey, error: surveyError } = await supabaseAdmin
  .from('surveys')
  .select(`
    *,
    clients (
      id,
      name
    ),
    sound_profiles (
      id,
      title
    )
  `)
  .eq('id', id)
  .single();

if (surveyError || !survey) {
  return Astro.redirect('/admin/surveys', 302);
}

// if (survey.status !== 'completed') {
//   return Astro.redirect('/admin/surveys', 302);
// }

// Fetch survey responses
const { data: responsesResult } = await supabaseAdmin
  .from('survey_responses')
  .select('*')
  .eq('survey_id', id)
  .order('created_at', { ascending: false });

const responses = responsesResult;

// Process survey data
const surveyResponses = responses || [];

// Debug: Log the actual structure of sound_mapping_responses
if (surveyResponses.length > 0 && surveyResponses[0].sound_mapping_responses) {
  console.log('Sample sound_mapping_responses structure:', JSON.stringify(surveyResponses[0].sound_mapping_responses, null, 2));
}

// Debug: Log survey data for analytics processing
console.log('Survey data for analytics:', {
  totalResponses: surveyResponses.length,
  completedResponses: surveyResponses.filter(r => r.completed).length,
  responsesWithMapping: surveyResponses.filter(r => r.sound_mapping_responses).length
});

// Calculate display metrics
const totalResponses = surveyResponses.length;
const completedResponses = surveyResponses.filter((r: SurveyResponse) => r.completed === true).length;
const completionRate = totalResponses ? (completedResponses / totalResponses * 100).toFixed(1) : 0;

// Prepare data for visualization
const graphData = prepareGraphData(surveyResponses);

// Calculate metrics for ReportGenerator
const metrics = calculateSuccessMetrics(surveyResponses);
const performanceAnalysis = performSoundPerformanceAnalysis(surveyResponses);
const behaviorMetrics = trackParticipantBehavior(surveyResponses);

---

<Layout title={`Survey Results: ${survey.title}`}>
  <div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-3xl font-bold">Survey Results: {survey.title}</h1>
      <StaticExporter
        surveyId={id}
      />
      
      <!-- Data Migration Controls -->
      <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-6">
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-medium text-yellow-800">Data Quality Notice</h3>
            <div class="mt-2 text-sm text-yellow-700">
              <p>Some survey responses may have incorrect match data due to previous matching logic. Use the migration tool to fix existing data.</p>
            </div>
            <div class="mt-4">
              <div class="flex space-x-2">
                <button
                  id="preview-migration"
                  class="bg-yellow-600 hover:bg-yellow-700 text-white text-sm px-3 py-1 rounded"
                >
                  Preview Changes
                </button>
                <button
                  id="run-migration"
                  class="bg-red-600 hover:bg-red-700 text-white text-sm px-3 py-1 rounded"
                >
                  Fix Data
                </button>
                <button
                  id="inspect-data"
                  class="bg-blue-600 hover:bg-blue-700 text-white text-sm px-3 py-1 rounded"
                >
                  Inspect Database
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <AnalyticsDashboard
      responses={surveyResponses}
      surveyId={id}
      error={null}
    />

    <ReportGenerator
      surveyData={survey}
      responses={surveyResponses}
      metrics={metrics}
      performanceAnalysis={performanceAnalysis}
      behaviorMetrics={behaviorMetrics}
      class="mb-8"
    />

    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
      <!-- Summary Cards -->
      <div class="bg-white shadow rounded-lg p-6">
        <h3 class="text-lg font-semibold text-gray-700 mb-2">Total Responses</h3>
        <p class="text-3xl font-bold">{totalResponses}</p>
      </div>
      
      <div class="bg-white shadow rounded-lg p-6">
        <h3 class="text-lg font-semibold text-gray-700 mb-2">Completed</h3>
        <p class="text-3xl font-bold">{completedResponses}</p>
      </div>
      
      <div class="bg-white shadow rounded-lg p-6">
        <h3 class="text-lg font-semibold text-gray-700 mb-2">Completion Rate</h3>
        <p class="text-3xl font-bold">{completionRate}%</p>
      </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
      <!-- Sound-Function Correlation -->
      <div class="bg-white shadow rounded-lg p-6">
        <h2 class="text-xl font-semibold mb-4">Sound-Function Correlation</h2>
        <div>
          <canvas id="correlationChart" class="h-64"></canvas>
        </div>
      </div>

      <!-- Success Rates -->
      <div class="bg-white shadow rounded-lg p-6">
        <h2 class="text-xl font-semibold mb-4">Success Rates</h2>
        <div>
          <canvas id="successRateChart" class="h-64"></canvas>
        </div>
      </div>

      <!-- Response Timeline -->
      <div class="bg-white shadow rounded-lg p-6">
        <h2 class="text-xl font-semibold mb-4">Response Timeline</h2>
        <div>
          <canvas id="timelineChart" class="h-64"></canvas>
        </div>
      </div>

      <!-- Error Patterns -->
      <div class="bg-white shadow rounded-lg p-6">
        <h2 class="text-xl font-semibold mb-4">Error Patterns</h2>
        <div>
          <canvas id="errorPatternChart" class="h-64"></canvas>
        </div>
      </div>
    </div>

    <!-- Detailed Responses Table -->
    <div class="mt-8 bg-white shadow rounded-lg p-6">
      <h2 class="text-xl font-semibold mb-4">Detailed Responses</h2>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead>
            <tr>
              <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Date
              </th>
              <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Success Rate
              </th>
              <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Time Taken
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            {responses?.map((response: SurveyResponse) => {
              // Calculate success rate from sound mapping data
              let successRate = 'N/A';
              let timeTaken = 'N/A';
              
              if (response.sound_mapping_responses) {
                const mappingData = response.sound_mapping_responses as any;
                if (mappingData?.sound_mapping) {
                  const mappings = Object.values(mappingData.sound_mapping) as any[];
                  if (mappings.length > 0) {
                    const successfulMappings = mappings.filter(m => m.matched === true).length;
                    const rate = (successfulMappings / mappings.length) * 100;
                    successRate = `${rate.toFixed(1)}%`;
                  }
                }
              }
              
              // Calculate time taken (use a reasonable estimate since we don't have exact timing data)
              // For now, we'll use a default estimate based on the number of questions
              if (response.sound_mapping_responses) {
                const mappingData = response.sound_mapping_responses as any;
                if (mappingData?.sound_mapping) {
                  const mappings = Object.values(mappingData.sound_mapping) as any[];
                  // Estimate ~30 seconds per question
                  const estimatedTime = mappings.length * 30;
                  timeTaken = `~${estimatedTime}s`;
                }
              }
              
              return (
                <tr>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {new Date(response.created_at).toLocaleDateString()}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${
                      response.completed ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                    }`}>
                      {response.completed ? 'completed' : 'incomplete'}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {successRate}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {timeTaken}
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </div>
  </div>
</Layout>

<script type="module" define:vars={{ graphData, id }}>
  import { Chart, registerables } from 'https://cdn.skypack.dev/chart.js';
  Chart.register(...registerables);

  // Use the server-side processed graphData
  const { correlationData, successRateData, errorPatternData, timelineData } = graphData;

  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', () => {
    const chartConfig = {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'bottom'
        }
      }
    };

    // Render correlation chart
    const correlationCtx = document.getElementById('correlationChart');
    if (correlationCtx) {
      new Chart(correlationCtx, {
        type: 'bar',
        data: correlationData,
        options: chartConfig
      });
    }

    // Render success rate chart
    const successRateCtx = document.getElementById('successRateChart');
    if (successRateCtx) {
      new Chart(successRateCtx, {
        type: 'line',
        data: successRateData,
        options: {
          ...chartConfig,
          scales: {
            y: {
              beginAtZero: true,
              max: 100
            }
          }
        }
      });
    }

    // Render timeline chart
    const timelineCtx = document.getElementById('timelineChart');
    if (timelineCtx) {
      new Chart(timelineCtx, {
        type: 'line',
        data: timelineData,
        options: chartConfig
      });
    }

    // Render error pattern chart
    const errorPatternCtx = document.getElementById('errorPatternChart');
    if (errorPatternCtx) {
      new Chart(errorPatternCtx, {
        type: 'bar',
        data: errorPatternData,
        options: chartConfig
      });
    }
  });

  // Migration functionality
  const surveyId = id; // Use the server-side id passed via define:vars
  
  document.getElementById('preview-migration')?.addEventListener('click', async () => {
    const button = document.getElementById('preview-migration');
    const originalText = button.textContent;
    
    try {
      button.textContent = 'Previewing...';
      button.disabled = true;
      
      const response = await fetch('/api/admin/migrate-survey-data', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'preview',
          surveyId: surveyId
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        const { totalResponses, matchesUpdated, details } = result.result;
        const correctMatches = details.filter(d => d.updated && d.newMatched).length;
        const incorrectMatches = details.filter(d => d.updated && !d.newMatched).length;
        
        alert(`Preview Results:\n\nTotal Responses: ${totalResponses}\nMatches to Update: ${matchesUpdated}\n\nWould be corrected to TRUE: ${correctMatches}\nWould be corrected to FALSE: ${incorrectMatches}\n\nNo changes made to database.`);
      } else {
        alert(`Preview failed: ${result.error}`);
      }
    } catch (error) {
      alert(`Preview error: ${error.message}`);
    } finally {
      button.textContent = originalText;
      button.disabled = false;
    }
  });

  document.getElementById('run-migration')?.addEventListener('click', async () => {
    if (!confirm('This will update the database to fix incorrect match data. Are you sure?')) {
      return;
    }
    
    const button = document.getElementById('run-migration');
    const originalText = button.textContent;
    
    try {
      button.textContent = 'Fixing...';
      button.disabled = true;
      
      const response = await fetch('/api/admin/migrate-survey-data', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'migrate',
          surveyId: surveyId
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        const { totalResponses, matchesUpdated, errors } = result.result;
        
        if (errors.length > 0) {
          alert(`Migration completed with errors:\n\nTotal Responses: ${totalResponses}\nMatches Updated: ${matchesUpdated}\nErrors: ${errors.length}\n\nPlease check the console for details.`);
          console.error('Migration errors:', errors);
        } else {
          alert(`Migration successful!\n\nTotal Responses: ${totalResponses}\nMatches Updated: ${matchesUpdated}\n\nPage will reload to show updated data.`);
          window.location.reload();
        }
      } else {
        alert(`Migration failed: ${result.error}`);
      }
    } catch (error) {
      alert(`Migration error: ${error.message}`);
    } finally {
      button.textContent = originalText;
      button.disabled = false;
    }
  });

  // Inspect database functionality
  document.getElementById('inspect-data')?.addEventListener('click', async () => {
    const button = document.getElementById('inspect-data');
    const originalText = button.textContent;
    
    try {
      button.textContent = 'Inspecting...';
      button.disabled = true;
      
      const response = await fetch('/api/admin/inspect-survey-data', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          surveyId: surveyId
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        const { analysis } = result;
        let message = `Database Inspection Results:\n\n`;
        message += `Total Responses: ${analysis.totalResponses}\n`;
        message += `Responses with Sound Mapping: ${analysis.responsesWithSoundMapping}\n\n`;
        
        if (analysis.sampleResponse) {
          message += `Sample Response ID: ${analysis.sampleResponse.id}\n`;
          message += `Sample Status: ${analysis.sampleResponse.status}\n`;
          message += `Sample Created: ${new Date(analysis.sampleResponse.created_at).toLocaleString()}\n\n`;
        }
        
        if (analysis.soundMappingStructure) {
          message += `Sound Mapping Structure Found:\n`;
          const mappingKeys = Object.keys(analysis.soundMappingStructure);
          message += `Number of sound mappings: ${mappingKeys.length}\n`;
          
          // Show first mapping as example
          if (mappingKeys.length > 0) {
            const firstMapping = analysis.soundMappingStructure[mappingKeys[0]];
            message += `\nExample mapping:\n`;
            message += `- Intended: ${firstMapping.intended}\n`;
            message += `- Matched: ${firstMapping.matched}\n`;
            message += `- Sound Name: ${firstMapping.sound_name}\n`;
          }
        }
        
        alert(message);
      } else {
        alert(`Inspection failed: ${result.error}`);
      }
    } catch (error) {
      alert(`Inspection error: ${error.message}`);
    } finally {
      button.textContent = originalText;
      button.disabled = false;
    }
  });
</script>