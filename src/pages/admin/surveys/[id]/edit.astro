---
import Layout from '../../../../layouts/Layout.astro';
import SurveyDetails from '../../../../components/admin/SurveyDetails.astro';
import SoundManager from '../../../../components/admin/SoundManager.astro';
import VideoUploader from '../../../../components/admin/VideoUploader.astro';
import SaveControls from '../../../../components/admin/SaveControls.astro';
import { getSurveyById, type SurveyWithRelations } from '../../../../utils/surveyDataManager';
import { checkAdminAccess } from '../../../../utils/accessControl';
import { getAllClients as listClients } from '../../../../utils/clientUtils';
import type { Database } from '../../../../types/database';
import type { ClientInfo } from '../../../../types/auth';

// Get survey ID from URL params
const { id } = Astro.params;
if (!id) {
    return Astro.redirect('/admin/surveys');
}

// Check admin access
try {
    const accessGranted = await checkAdminAccess(Astro);
    if (!accessGranted) {
        return Astro.redirect('/login?error=access_denied&redirect=' + encodeURIComponent(Astro.url.pathname));
    }
} catch (error) {
    console.error('Error checking admin access:', error);
    return Astro.redirect('/error?message=auth_error');
}

// Fetch survey and client data
let survey: SurveyWithRelations | null = null;
let clients: Database['public']['Tables']['clients']['Row'][] = [];
try {
    console.log('Fetching survey with ID:', id);
    survey = await getSurveyById(id);
    console.log('Survey data:', survey);
    
    if (!survey) {
        console.error('Survey not found');
        return Astro.redirect('/admin/surveys?error=survey_not_found');
    }
    
    const clientsResponse = await listClients();
    // Map ClientInfo to Database client type
    clients = clientsResponse.data.map(client => ({
      id: client.id,
      name: client.name,
      email: client.email,
      company: client.company ?? null, // Ensure it's null, not undefined
      active: client.active,
      created_at: client.created_at || new Date().toISOString()
    }));
    console.log('Clients loaded:', clients.length);
} catch (error) {
    console.error('Error fetching data:', error);
    return Astro.redirect('/error?message=fetch_error');
}
---

<Layout title={`Edit Survey - ${survey.title}`}>
    <div class="min-h-screen bg-gray-100 py-6">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <!-- Header -->
            <div class="mb-6">
                <div class="flex items-center justify-between">
                    <h1 class="text-2xl font-bold text-gray-900">Edit Survey</h1>
                    <a
                        href="/admin/surveys"
                        class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    >
                        <svg
                            class="-ml-1 mr-2 h-5 w-5 text-gray-500"
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 20 20"
                            fill="currentColor"
                        >
                            <path
                                fill-rule="evenodd"
                                d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z"
                                clip-rule="evenodd"
                            />
                        </svg>
                        Back to Surveys
                    </a>
                </div>
                <nav class="mt-3" aria-label="Breadcrumb">
                    <ol class="flex items-center space-x-2 text-sm text-gray-500">
                        <li>
                            <a href="/admin/surveys" class="hover:text-gray-700">Surveys</a>
                        </li>
                        <li>
                            <svg
                                class="h-5 w-5 text-gray-400"
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 20 20"
                                fill="currentColor"
                            >
                                <path
                                    fill-rule="evenodd"
                                    d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                                    clip-rule="evenodd"
                                />
                            </svg>
                        </li>
                        <li>
                            <span class="font-medium text-gray-900">Edit</span>
                        </li>
                    </ol>
                </nav>
            </div>

            <!-- Main Content -->
            <div class="space-y-6 pb-20">
                <!-- Survey Details Section -->
                <SurveyDetails survey={survey} clients={clients} />

                <!-- Sound Management Section -->
                <SoundManager surveyId={id} />

                <!-- Video Upload Section -->
                <VideoUploader surveyId={id} />
            </div>

            <!-- Save Controls (Fixed at bottom) -->
            <SaveControls surveyId={id} status={survey.status} />
        </div>
    </div>
</Layout>

<script>
    // Handle form submission
    document.addEventListener('DOMContentLoaded', () => {
        // Listen for custom events from components
        document.addEventListener('surveyUpdated', (event: Event) => {
            const customEvent = event as CustomEvent;
            // Refresh the page or update necessary UI elements
            if (customEvent.detail?.refresh) {
                window.location.reload();
            }
        });

        // Handle navigation warnings
        window.addEventListener('beforeunload', (event) => {
            const hasUnsavedChanges = document.querySelector('[data-unsaved-changes="true"]');
            if (hasUnsavedChanges) {
                event.preventDefault();
                event.returnValue = '';
            }
        });
    });
</script>